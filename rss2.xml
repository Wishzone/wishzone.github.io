<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Wishzone</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>留点热情给旁边人</description>
    <pubDate>Mon, 28 Aug 2023 09:46:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>数据管理</title>
      <link>http://example.com/2023/08/27/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</link>
      <guid>http://example.com/2023/08/27/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</guid>
      <pubDate>Sun, 27 Aug 2023 13:07:09 GMT</pubDate>
      
      <description>&lt;p&gt;mysql数据管理&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>mysql数据管理<br><span id="more"></span></p><h1 id="Docker-WordPress搭建网站"><a href="#Docker-WordPress搭建网站" class="headerlink" title="Docker+WordPress搭建网站"></a>Docker+WordPress搭建网站</h1><p>1.本地安装好 Docker 软件<br>2.拉取 WordPress 镜像<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull wordpress</span><br></pre></td></tr></table></figure><br>3.启动 MySQL 容器<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3123:3306 --name wpmysql -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line"></span><br><span class="line"># run: 启动一个容器</span><br><span class="line"># -d: 启动的容器在后台运行</span><br><span class="line"># --name: 容器名 wpmysql</span><br><span class="line"># -e MYSQL_ROOT_PASSWORD:  设置 MySQL 的 root 密码</span><br><span class="line"># -p：映射端口，将容器的3306端口映射到主机的3123端口</span><br><span class="line"># mysql：启动的镜像，如果具体版本，这里也要加上具体版本号 mysql:5.2</span><br></pre></td></tr></table></figure><br>4.启动 WordPress 容器，并连接到 MySQL 容器上<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:80 --name wordpress --link wpmysql:mysql wordpress</span><br><span class="line"># -p：映射端口，本地访问路径：http://localhost:8088</span><br><span class="line"># --link：将 wpmysql 容器挂载到 mysql 上，这样 WordPress 才能访问</span><br><span class="line">不出意外的话，在浏览器打开后设置好数据库信息看到的是这样的：</span><br></pre></td></tr></table></figure><br>5.配置Mysql<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1.进入mysql容器</span><br><span class="line">docker exec -it wpmysql bash</span><br><span class="line"># 2.登录mysql</span><br><span class="line">mysql -uroot -p</span><br><span class="line"># 3.授权root用户在其他机器上运行：host为 % 表示不限制ip，默认的localhost表示本机使用</span><br><span class="line">grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line"># 4.如果是 mysql8 版本，由于不支持动态修改密码验证，还需要更新root用户密码</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class="line"># 5.自己创建一个名字为 wordpress 的数据库(要跟wordpress安装是让配置的名字一致)</span><br><span class="line">create database wordpress;</span><br><span class="line"># 6.刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><h1 id="Docker-Phpmyadmin"><a href="#Docker-Phpmyadmin" class="headerlink" title="Docker+Phpmyadmin"></a>Docker+Phpmyadmin</h1><p>1.本地安装好 Docker 软件<br>2.拉取 Phpmyadmin 镜像<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull phpmyadmin</span><br></pre></td></tr></table></figure><br>3.启动 Phpmyadmin 容器<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name myadmin -d -e PMA_ARBITRARY=1 -p 8080:80 phpmyadmin</span><br><span class="line"></span><br><span class="line">参数介绍：</span><br><span class="line">PMA_ARBITRARY -设置为1时，将允许连接到任意服务器</span><br><span class="line">PMA_HOST -定义MySQL服务器的地址/主机名</span><br><span class="line">PMA_VERBOSE -定义MySQL服务器的详细名称</span><br><span class="line">PMA_PORT -定义MySQL服务器的端口</span><br><span class="line">PMA_HOSTS -定义逗号分隔的MySQL服务器的地址/主机名列表</span><br><span class="line">PMA_VERBOSES -定义以逗号分隔的MySQL服务器详细名称列表</span><br><span class="line">PMA_PORTS -定义以逗号分隔的MySQL服务器端口列表</span><br><span class="line">PMA_USER和PMA_PASSWORD-定义用于配置身份验证方法的用户名</span><br><span class="line">PMA_ABSOLUTE_URI -定义面向用户的URI</span><br><span class="line">HIDE_PHP_VERSION-如果定义，则将隐藏php版本（expose_php = Off）。设置为任何值（例如HIDE_PHP_VERSION = true）。</span><br><span class="line">UPLOAD_LIMIT -如果设置，将覆盖apache和php-fpm的默认值（默认值为2048 kb）</span><br><span class="line">PMA_CONFIG_BASE64 -如果设置，将使用变量的base64解码内容覆盖默认的config.inc.php</span><br><span class="line">PMA_USER_CONFIG_BASE64 -如果设置，将使用变量的base64解码内容覆盖默认的config.user.inc.php</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="phpmyadmin外链数据库或切换端口"><a href="#phpmyadmin外链数据库或切换端口" class="headerlink" title="phpmyadmin外链数据库或切换端口"></a>phpmyadmin外链数据库或切换端口</h1><p>1.修改phpmyadmin目录中libraries文件夹下的config.default.php文件<br>2.查找[‘Servers’][$i][‘host’]= xxx，改成所需的地址；<br>查找[‘Servers’][$i][‘port’]= xxx，改成所需的端口；<br>查找[‘Servers’][$i][‘user’]= xxx，改成所需的用户；<br>查找[‘Servers’][$i][‘password’]= xxx，改成所需的用户；</p><h1 id="wordpress配置文件"><a href="#wordpress配置文件" class="headerlink" title="wordpress配置文件"></a>wordpress配置文件</h1><p>wp-config.php</p><h1 id="修改最大上传文件大小限制"><a href="#修改最大上传文件大小限制" class="headerlink" title="修改最大上传文件大小限制"></a>修改最大上传文件大小限制</h1><p>可通过修改.htaccess文件完成<br>1、wordpress根目录下（/var/www/html）找到.htaccess文件<br>2、打开.htaccess文件并在module中间添加以下代码：<br>php_value upload_max_filesize 100M<br>php_value post_max_size 100M<br>将“100M”替换为您需要的大小。<br>3、保存并关闭.htaccess文件。</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/08/27/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux</title>
      <link>http://example.com/2023/08/24/Linux/</link>
      <guid>http://example.com/2023/08/24/Linux/</guid>
      <pubDate>Thu, 24 Aug 2023 09:51:15 GMT</pubDate>
      
      <description>&lt;p&gt;Linux一些问题和解决方法&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Linux一些问题和解决方法<br><span id="more"></span></p><h1 id="远程访问方式对比"><a href="#远程访问方式对比" class="headerlink" title="远程访问方式对比"></a>远程访问方式对比</h1><h2 id="XRDP"><a href="#XRDP" class="headerlink" title="XRDP"></a>XRDP</h2><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>1.通常只支持X类的管理器<br>2.不能多用户同时登录<br>3.Linux下不支持UDP协议</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>1.安装包小<br>2.安装简单<br>3.画质高，速度快</p><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1.显示效果相对较差<br>2.需要HDMI诱骗器</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.支持UDP，相应快</p><h1 id="Linux系统设置开机启动："><a href="#Linux系统设置开机启动：" class="headerlink" title="Linux系统设置开机启动："></a>Linux系统设置开机启动：</h1><h2 id="1-在-etc-rc-local添加需要启动的命令"><a href="#1-在-etc-rc-local添加需要启动的命令" class="headerlink" title="1.在/etc/rc.local添加需要启动的命令"></a>1.在/etc/rc.local添加需要启动的命令</h2><p>这样系统在启动的时候会自动执行这些命令。</p><h2 id="2-使用systemd服务管理器，"><a href="#2-使用systemd服务管理器，" class="headerlink" title="2.使用systemd服务管理器，"></a>2.使用systemd服务管理器，</h2><p>在/etc/systemd/system目录下创建一个service文件，指定需要启动的服务和相关参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /lib/systemd/system/frpc.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">#服务描述</span><br><span class="line">Description=frpc service</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">#执行命令</span><br><span class="line">ExecStart=/usr/local/frpc/frpc -c /usr/local/frpc/frpc.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">sudo systemctl enable frpc</span><br></pre></td></tr></table></figure><h2 id="3-将需要启动的命令添加到用户的bashrc文件中，这样每个用户登录时都会自动执行这些命令。"><a href="#3-将需要启动的命令添加到用户的bashrc文件中，这样每个用户登录时都会自动执行这些命令。" class="headerlink" title="3. 将需要启动的命令添加到用户的bashrc文件中，这样每个用户登录时都会自动执行这些命令。"></a>3. 将需要启动的命令添加到用户的bashrc文件中，这样每个用户登录时都会自动执行这些命令。</h2><h1 id="退出XRDP未注销的用户"><a href="#退出XRDP未注销的用户" class="headerlink" title="退出XRDP未注销的用户"></a>退出XRDP未注销的用户</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">who -a  //查看登录的用户</span><br><span class="line">pkill -kill -t pts/3  //注销用户</span><br></pre></td></tr></table></figure><h1 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">apt install sudo</span><br><span class="line">sudo usermod -aG sudo username  //username替换为所需的用户名</span><br><span class="line">nano /etc/default/useradd</span><br><span class="line">改/bin/sh为/bin/bash</span><br><span class="line">nano /etc/passwd </span><br><span class="line">改用户名后面的/bin/sh为/bin/bash</span><br></pre></td></tr></table></figure><h1 id="Ubuntu优化"><a href="#Ubuntu优化" class="headerlink" title="Ubuntu优化"></a>Ubuntu优化</h1><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>sudo apt install gparted htop net-tools putty vim fcitx fcitx-googlepinyin xrdp xorg xorgxrdp tofrodos iproute2 gawk gcc g++ git make net-tools libncurses5-dev tftpd zlib1g:i386 libssl-dev flex bison libselinux1 gnupg wget diffstat chrpath socat xterm autoconf libtool tar unzip texinfo zlib1g-dev gcc-multilib build-essential libsdl1.2-dev libglib2.0-dev screen pax gzip automake tftpd-hpa ubuntu-restricted-extras gnome-tweaks gnome-shell-extension-manager indicator-multiload libncurses5 libtinfo5 libncurses5-dev libncursesw5-dev samba ssh</p><p>sudo apt install tftpd-hpa ncurses-compat-libs</p><p>service tftpd-hpa restart</p><p>wget <a href="http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1l-1ubuntu1.3_amd64.deb">http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1l-1ubuntu1.3_amd64.deb</a></p><p>sudo dpkg -i libssl1.1_1.1.1l-1ubuntu1.3_amd64.deb</p><p>sudo dpkg-reconfigure dash (选NO）</p><h2 id="解决“色彩管理设备”"><a href="#解决“色彩管理设备”" class="headerlink" title="解决“色彩管理设备”"></a>解决“色彩管理设备”</h2><p>sudo nano /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Allow Colord all Users]</span><br><span class="line">Identity=unix-user:*</span><br><span class="line">Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile</span><br><span class="line">ResultAny=no</span><br><span class="line">ResultInactive=no</span><br><span class="line">ResultActive=yes</span><br></pre></td></tr></table></figure><h2 id="解决“刷新系统软件源需要认证”"><a href="#解决“刷新系统软件源需要认证”" class="headerlink" title="解决“刷新系统软件源需要认证”"></a>解决“刷新系统软件源需要认证”</h2><p>nano /etc/polkit-1/localauthority/50-local.d/46-allow-packagekit.pkla</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Allow Refresh Repository all Users]</span><br><span class="line">Identity=unix-user:*</span><br><span class="line">Action=org.freedesktop.packagekit.system-sources-refresh</span><br><span class="line">ResultAny=no</span><br><span class="line">ResultInactive=no</span><br><span class="line">ResultActive=yes</span><br></pre></td></tr></table></figure><h2 id="解决“扫描WIFI需要认证”"><a href="#解决“扫描WIFI需要认证”" class="headerlink" title="解决“扫描WIFI需要认证”"></a>解决“扫描WIFI需要认证”</h2><p>sudo nano /etc/polkit-1/localauthority/50-local-d/allow-wifiscan</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Allow Wifi Scan]</span><br><span class="line">Identity=unix-user:*</span><br><span class="line">Action=org.freedesktop.NetworkManager.wifi.scan;org.freedesktop.NetworkManager.enable-disable-wifi;org.freedesktop.NetworkManager.settings.modify.own;org.freedesktop.NetworkManager.settings.modify.system;org.freedesktop.NetworkManager.network-control</span><br><span class="line">ResultAny=yes</span><br><span class="line">ResultInactive=yes</span><br><span class="line">ResultActive=yes</span><br></pre></td></tr></table></figure><h1 id="自定义二级域名"><a href="#自定义二级域名" class="headerlink" title="自定义二级域名"></a>自定义二级域名</h1><p>在多人同时使用一个 frps 时，通过自定义二级域名的方式来使用会更加方便。</p><p>通过在 frps 的配置文件中配置 subdomain_host，就可以启用该特性。之后在 frpc 的 http、https 类型的代理中可以不配置 custom_domains，而是配置一个 subdomain 参数。</p><p>只需要将 *.{subdomain_host} 解析到 frps 所在服务器。之后用户可以通过 subdomain 自行指定自己的 web 服务所需要使用的二级域名，通过 {subdomain}.{subdomain_host} 来访问自己的 web 服务。</p><h2 id="frps-ini"><a href="#frps-ini" class="headerlink" title="frps.ini"></a>frps.ini</h2><p>[common]<br>subdomain_host = frps.com<br>将泛域名 *.frps.com 解析到 frps 所在服务器的 IP 地址。</p><h2 id="frpc-ini"><a href="#frpc-ini" class="headerlink" title="frpc.ini"></a>frpc.ini</h2><p>[web]<br>type = http<br>local_port = 80<br>subdomain = test<br>frps 和 frpc 都启动成功后，通过 test.frps.com 就可以访问到内网的 web 服务。</p><p>注：如果 frps 配置了 subdomain_host，则 custom_domains 中不能是属于 subdomain_host 的子域名或者泛域名。</p><p>同一个 http 或 https 类型的代理中 custom_domains 和 subdomain 可以同时配置。</p><h1 id="解决休眠问题："><a href="#解决休眠问题：" class="headerlink" title="解决休眠问题："></a>解决休眠问题：</h1><p>检查休眠功能的状态<br>systemctl status sleep.target</p><p>执行关闭休眠功能的命令<br>如果是作为服务器使用的时候，我们一般远程访问系统，这个功能就会导致我们无法远程控制服务器，因此我们需要关闭这个功能。<br>systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target</p><p>再次观察系统休眠状态<br>systemctl status sleep.target</p><h1 id="Ubuntu常见问题及解决办法"><a href="#Ubuntu常见问题及解决办法" class="headerlink" title="Ubuntu常见问题及解决办法"></a>Ubuntu常见问题及解决办法</h1><h2 id="由于没有公钥，无法验证下列签名：-NO-PUBKEY-76F1A20FF987672F"><a href="#由于没有公钥，无法验证下列签名：-NO-PUBKEY-76F1A20FF987672F" class="headerlink" title="由于没有公钥，无法验证下列签名： NO_PUBKEY 76F1A20FF987672F"></a>由于没有公钥，无法验证下列签名： NO_PUBKEY 76F1A20FF987672F</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $&#123;PUBLIC_KEY_SIGN&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/08/24/Linux/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Openwrt</title>
      <link>http://example.com/2023/08/24/Openwrt/</link>
      <guid>http://example.com/2023/08/24/Openwrt/</guid>
      <pubDate>Thu, 24 Aug 2023 09:44:34 GMT</pubDate>
      
      <description>&lt;p&gt;Openwrt的配置问题及解决方法&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Openwrt的配置问题及解决方法<br><span id="more"></span></p><h1 id="开启80端口和22端口"><a href="#开启80端口和22端口" class="headerlink" title="开启80端口和22端口"></a>开启80端口和22端口</h1><p>由于小米路由为了安全考虑，对WEB与防火墙规则进行限制，WEB管理、SSH只能通过内网登 陆，外网无法访问，在路由器的WEB管理页面新建端口转发中不能添加路由本机内网IP。<br>开启小米路由的SSH后，我们可以通过登陆SSH在命令行中手动添加防火墙中端口转发规则</p><h2 id="一、解除WEB管理页面访问限制"><a href="#一、解除WEB管理页面访问限制" class="headerlink" title="一、解除WEB管理页面访问限制"></a>一、解除WEB管理页面访问限制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysapihttpd/       //切换目录</span><br><span class="line">cp miwifi-webinitrd.conf miwifi-webinitrd.conf.bak       //备份</span><br><span class="line">vi miwifi-webinitrd.conf  //编辑miwifi-webinitrd.conf</span><br><span class="line"></span><br><span class="line">在如下位置插入代码set $finalvar &quot;$canproxy $isluci&quot;;：</span><br><span class="line"></span><br><span class="line">set $isluci &quot;1&quot;;</span><br><span class="line"></span><br><span class="line">set $finalvar &quot;$canproxy $isluci&quot;;</span><br><span class="line"></span><br><span class="line">/etc/init.d/sysapihttpd restart  //重启httpd服务使配置生效</span><br></pre></td></tr></table></figure><p>二、手动添加防火墙端口转发规则，开启外网访问WEB管理和SSH</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cd /                     //回到根目录</span><br><span class="line">vi /etc/config/firewall           //编辑防火墙配置</span><br><span class="line">1.添加WEB管理外网端口转发规则代码段：</span><br><span class="line">config redirect &#x27;MIWEB&#x27;</span><br><span class="line">    option src &#x27;wan&#x27;</span><br><span class="line">    option src_dport &#x27;1314&#x27;</span><br><span class="line">    option dest_ip &#x27;10.0.0.1&#x27;</span><br><span class="line">    option name &#x27;WEB&#x27;</span><br><span class="line">    option ftype &#x27;1&#x27;</span><br><span class="line">    option dest_port &#x27;80&#x27;</span><br><span class="line">    option proto &#x27;tcp&#x27;</span><br><span class="line"></span><br><span class="line">WEB管理界面外网端口为1314  可通过外网IP:1314访问 (例 http://61.181.133.5:1314),绑定DDNS的用户可通过域名:1314进行访问。</span><br><span class="line">2.添加SSH外网登陆端口转发规则代码段：</span><br><span class="line">config redirect &#x27;Myssh&#x27;</span><br><span class="line">    option src &#x27;wan&#x27;</span><br><span class="line">    option src_dport &#x27;2345&#x27;</span><br><span class="line">    option dest &#x27;lan&#x27;</span><br><span class="line">    option dest_port &#x27;22&#x27;</span><br><span class="line">    option proto &#x27;tcp&#x27;</span><br><span class="line"></span><br><span class="line">SSH登陆外网端口为2345</span><br><span class="line">重启防火墙使规则生效</span><br><span class="line"></span><br><span class="line">/etc/init.d/firewall restart</span><br></pre></td></tr></table></figure><h1 id="查看端口状态："><a href="#查看端口状态：" class="headerlink" title="查看端口状态："></a>查看端口状态：</h1><p>iptables -L -n</p><h1 id="Openwrt编译指南"><a href="#Openwrt编译指南" class="headerlink" title="Openwrt编译指南"></a>Openwrt编译指南</h1><h2 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h2><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a><a href="https://openwrt.org/docs/guide-developer/toolchain/install-buildsystem#debianubuntu">安装软件</a></h3><p>根据系统选择合适的代码复制粘贴即可<br>sudo apt update<br>sudo apt install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \<br>gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \<br>file wget</p><h2 id="配置源码"><a href="#配置源码" class="headerlink" title="配置源码"></a><a href="https://openwrt.org/docs/guide-developer/toolchain/use-buildsystem">配置源码</a></h2><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.openwrt.org/openwrt/openwrt.git [&lt;buildroot&gt;]</span><br></pre></td></tr></table></figure><h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag //查看版本</span><br><span class="line">git checkout v22.03.5 //切换到22.03.5</span><br></pre></td></tr></table></figure><h3 id="更新源码"><a href="#更新源码" class="headerlink" title="更新源码"></a>更新源码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="更新feeds"><a href="#更新feeds" class="headerlink" title="更新feeds"></a>更新feeds</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pull the latest updates for the feeds in case it became outdated.</span><br><span class="line"></span><br><span class="line">./scripts/feeds update -a</span><br><span class="line">Make the downloaded package/packages available in make menuconfig.</span><br><span class="line"></span><br><span class="line">./scripts/feeds install &lt;package_name&gt;</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure><h3 id="make-menuconfig"><a href="#make-menuconfig" class="headerlink" title="make menuconfig"></a>make menuconfig</h3><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make download V=s</span><br><span class="line">make V=s</span><br></pre></td></tr></table></figure><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>进入/bin/target<br>xxx.combined.img即为编译的镜像</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/08/24/Openwrt/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://example.com/2023/08/24/Docker/</link>
      <guid>http://example.com/2023/08/24/Docker/</guid>
      <pubDate>Thu, 24 Aug 2023 09:38:47 GMT</pubDate>
      
      <description>&lt;p&gt;docker的基本用法&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>docker的基本用法<br><span id="more"></span></p><h2 id="配置非root用户使用docker"><a href="#配置非root用户使用docker" class="headerlink" title="配置非root用户使用docker"></a>配置非root用户使用docker</h2><h3 id="一、为用户添加root权限"><a href="#一、为用户添加root权限" class="headerlink" title="一、为用户添加root权限"></a>一、为用户添加root权限</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>修改 /etc/sudoers 文件，找到下面一行，把前面的注释（#）去掉<br>Allows people in group wheel to run all commands<br>%wheel ALL=(ALL) ALL<br>然后修改用户，使其属于root组（wheel），命令如下：</p><h1 id="usermod-g-root-ithing"><a href="#usermod-g-root-ithing" class="headerlink" title="usermod -g root ithing"></a>usermod -g root ithing</h1><p>修改完毕，现在可以用tommy帐号登录，然后用命令 su - ，即可获得root权限进行操作。</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>修改 /etc/sudoers 文件，找到下面一行，在root下面添加一行，如下所示：<br>Allow root to run any commands anywhere<br>root ALL=(ALL) ALL<br>ithing ALL=(ALL) ALL</p><p>如果，在修改/etc/sudoers 文件，你该错误了，会导致使用不了sudo命令，使用vim也打不开该文件了；</p><p><strong>解决方式</strong>：执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkexec visudo</span><br></pre></td></tr></table></figure><h3 id="二、为非root用户添加docker执行权限"><a href="#二、为非root用户添加docker执行权限" class="headerlink" title="二、为非root用户添加docker执行权限"></a>二、为非root用户添加docker执行权限</h3><h4 id="方式1：创建docker组"><a href="#方式1：创建docker组" class="headerlink" title="方式1：创建docker组"></a>方式1：创建docker组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker     #添加docker用户组</span><br><span class="line">sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中</span><br><span class="line">newgrp docker     #更新用户组</span><br><span class="line">docker ps    #测试docker命令是否可以使用sudo正常使用</span><br></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><p>直接修改 /var/run/docker.sock文件（这样是所有的用户都可操作docker,这样不安全，但是如果安全性要求不高，就可这样做）</p><p>先查看一下默认这个文件/var/run/docker.sock的权限是啥 ？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ls -al /var/run/docker.sock</span><br><span class="line">srw-rw---- 1 root root 0 Feb 15 03:13 /var/run/docker.sock</span><br><span class="line"></span><br><span class="line">#修改文件权限</span><br><span class="line">sudo chmod 666 /var/run/docker.sock</span><br><span class="line"></span><br><span class="line">#修改后，再查看一下这个文件的权限</span><br><span class="line">$ sudo ls -al /var/run/docker.sock</span><br><span class="line">srw-rw-rw- 1 root root 0 Feb 15 03:14 /var/run/docker.sock</span><br></pre></td></tr></table></figure><h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><p>docker pull xxx  //拉取镜像<br>docker image list //查看镜像<br>docker image rm [ID] //删除镜像<br>cat docker/xxx.tar | docker import - xxx:v1 //导入本地包到镜像</p><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><p>docker run —name=xyz -it xxx /bin/bash //前台运行<br>docker run —name=xyz -itd xxx /bin/bash  //后台运行<br>docker exec -it [ID] /bin/bash  //进入运行中的容器<br>docker stop [ID] //停止容器<br>docker restart [ID] //重启容器<br>docker rm -f [ID] //删除容器<br>docker export [ID] &gt; xxx.tar //导出容器到本地包<br>docker container prune //清除所有停止的容器<br>docker commit -m=”has update” -a=”runoob” [ID] name:v2  //提交容器为镜像</p><h2 id="修改映射地址和端口（wordpress为例）"><a href="#修改映射地址和端口（wordpress为例）" class="headerlink" title="修改映射地址和端口（wordpress为例）"></a>修改映射地址和端口（wordpress为例）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1. 进入到容器中</span><br><span class="line">docker exec -it wordpress bash</span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line"># 2. 官方的 wordpress 镜像中并没有预装vim编辑器，所以要先装一下编辑器</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line"># 3. 编辑 wp-config.php 文件</span><br><span class="line">vi wp-config.php</span><br><span class="line"></span><br><span class="line"># 找到 define &#x27;DB_HOST&#x27; 那一行修改</span><br><span class="line"># 按【i】进入输入模式，移动光标去修改</span><br><span class="line"># 按键盘左上角【退出Esc】切换到命令模式，输入【:wq 】保存后离开</span><br></pre></td></tr></table></figure><h1 id="推送操作"><a href="#推送操作" class="headerlink" title="推送操作"></a>推送操作</h1><p>docker push xxx //推送xxx到仓库</p><p>注意docker镜像需要提前改名才能推送（name/xxx:v1.0）</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/08/24/Docker/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PVE</title>
      <link>http://example.com/2023/08/24/PVE/</link>
      <guid>http://example.com/2023/08/24/PVE/</guid>
      <pubDate>Thu, 24 Aug 2023 03:32:35 GMT</pubDate>
      
      <description>&lt;p&gt;PVE的一部分配置&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>PVE的一部分配置<br><span id="more"></span></p><h1 id="PVE-使用无线网卡上网"><a href="#PVE-使用无线网卡上网" class="headerlink" title="PVE 使用无线网卡上网"></a>PVE 使用无线网卡上网</h1><h2 id="查询网卡是否识别"><a href="#查询网卡是否识别" class="headerlink" title="查询网卡是否识别"></a>查询网卡是否识别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br><span class="line">在输出的信息中查看是否包含 w 开头的网卡 </span><br></pre></td></tr></table></figure><h2 id="安装并配置WiFi管理工具"><a href="#安装并配置WiFi管理工具" class="headerlink" title="安装并配置WiFi管理工具"></a>安装并配置WiFi管理工具</h2><p>以iwd为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装软件</span><br><span class="line">apt install iwd</span><br><span class="line">#启动 iwd ，并设置开机启动</span><br><span class="line">systemctl start iwd</span><br><span class="line">systemctl enable iwd</span><br></pre></td></tr></table></figure><h2 id="查看无线网卡"><a href="#查看无线网卡" class="headerlink" title="查看无线网卡"></a>查看无线网卡</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwctl device list</span><br></pre></td></tr></table></figure><h2 id="扫描并获取无线网络"><a href="#扫描并获取无线网络" class="headerlink" title="扫描并获取无线网络"></a>扫描并获取无线网络</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iwctl station wlan0 scan</span><br><span class="line">iwctl station wlan0 get-networks</span><br></pre></td></tr></table></figure><h2 id="连接无线网"><a href="#连接无线网" class="headerlink" title="连接无线网"></a>连接无线网</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwctl --passphrase 密码 station 网卡 connect SSID</span><br></pre></td></tr></table></figure><h2 id="安装并配置-DHCP-为虚拟机自动分配IP"><a href="#安装并配置-DHCP-为虚拟机自动分配IP" class="headerlink" title="安装并配置 DHCP 为虚拟机自动分配IP"></a>安装并配置 DHCP 为虚拟机自动分配IP</h2><p>以dnsmasq为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt install dnsmasq</span><br><span class="line"># 修改配置文件 /etc/dnsmasq.conf</span><br><span class="line"># 为vmbr0网卡自动分配IP，从100-254，租约72小时</span><br><span class="line">interface=vmbr0</span><br><span class="line">dhcp-range=10.10.10.100,10.10.10.254,255.255.255.0,72h</span><br><span class="line"># 设置开机启动</span><br><span class="line">systemctl enable dnsmasq</span><br></pre></td></tr></table></figure><h2 id="配置网络让路由器下的其它设备能连上pve和虚拟机"><a href="#配置网络让路由器下的其它设备能连上pve和虚拟机" class="headerlink" title="配置网络让路由器下的其它设备能连上pve和虚拟机"></a>配置网络让路由器下的其它设备能连上pve和虚拟机</h2><h3 id="编辑配置文件-etc-network-interfaces"><a href="#编辑配置文件-etc-network-interfaces" class="headerlink" title="编辑配置文件  /etc/network/interfaces"></a>编辑配置文件  /etc/network/interfaces</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"># 设置无线网卡静态IP</span><br><span class="line">auto wlan0</span><br><span class="line">iface wlan0 inet static</span><br><span class="line">        address 192.168.31.2/24</span><br><span class="line">        gateway 192.168.31.1</span><br><span class="line"></span><br><span class="line">iface enp6s0 inet manual</span><br><span class="line"># 设置 NAT</span><br><span class="line">auto vmbr0</span><br><span class="line">iface vmbr0 inet static</span><br><span class="line">        address 10.10.10.1/24</span><br><span class="line">        bridge-ports enp6s0</span><br><span class="line">        bridge-stp off</span><br><span class="line">        bridge-fd 0</span><br><span class="line"></span><br><span class="line">        post-up echo 1 &gt; /proc/sys/net/ipv4/ip_forward # 开启IP转发</span><br><span class="line">        post-up bash /root/iptables.config.sh # 定义规则</span><br></pre></td></tr></table></figure><h3 id="修改-root-iptables-config-sh"><a href="#修改-root-iptables-config-sh" class="headerlink" title="修改 /root/iptables.config.sh"></a>修改 /root/iptables.config.sh</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">#设置NAT，让10.10.10.0/24的数据走wlan0网卡</span><br><span class="line">iptables -t nat -A POSTROUTING -s &#x27;10.10.10.0/24&#x27; -o wlan0 -j MASQUERADE</span><br><span class="line">iptables -t raw -I PREROUTING -i fwbr+ -j CT --zone 1</span><br></pre></td></tr></table></figure><h3 id="设置端口转发-让路由器下的设备能访问到虚拟机"><a href="#设置端口转发-让路由器下的设备能访问到虚拟机" class="headerlink" title="设置端口转发, 让路由器下的设备能访问到虚拟机"></a>设置端口转发, 让路由器下的设备能访问到虚拟机</h3><h3 id="把访问-192-168-31-2-指定端口的流量转发到虚拟机对应的IP"><a href="#把访问-192-168-31-2-指定端口的流量转发到虚拟机对应的IP" class="headerlink" title="把访问 192.168.31.2 指定端口的流量转发到虚拟机对应的IP"></a>把访问 192.168.31.2 指定端口的流量转发到虚拟机对应的IP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 8006 -j DNAT --to-destination 10.10.10.1:8006</span><br><span class="line">iptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 10100 -j DNAT --to-destination 10.10.10.100:80</span><br></pre></td></tr></table></figure><h3 id="设置默认路由，将所有未知目的地的数据包发送到-wlan0-网络接口上，并将它们的下一跳设置为-192-168-31-1"><a href="#设置默认路由，将所有未知目的地的数据包发送到-wlan0-网络接口上，并将它们的下一跳设置为-192-168-31-1" class="headerlink" title="设置默认路由，将所有未知目的地的数据包发送到 wlan0 网络接口上，并将它们的下一跳设置为 192.168.31.1"></a>设置默认路由，将所有未知目的地的数据包发送到 wlan0 网络接口上，并将它们的下一跳设置为 192.168.31.1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip route add default via 192.168.31.1 dev wlan0</span><br><span class="line">ip route flush cache </span><br></pre></td></tr></table></figure><h1 id="PVE监测温度"><a href="#PVE监测温度" class="headerlink" title="PVE监测温度"></a>PVE监测温度</h1><h2 id="安装并配置温度监控软件-lm-sensors"><a href="#安装并配置温度监控软件-lm-sensors" class="headerlink" title="安装并配置温度监控软件 lm-sensors"></a>安装并配置温度监控软件 lm-sensors</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install lm-sensors</span><br><span class="line"># 验证lm-sensors的版本</span><br><span class="line">sensors -v</span><br><span class="line">sensors-detect #获取可显示的温度,全部填YES</span><br><span class="line">sensors #读取传感器</span><br></pre></td></tr></table></figure><p>显示如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@wishzone:~# sensors</span><br><span class="line">iwlwifi_1-virtual-0</span><br><span class="line">Adapter: Virtual device</span><br><span class="line">temp1:        +53.0°C  </span><br><span class="line"></span><br><span class="line">nvme-pci-0300</span><br><span class="line">Adapter: PCI adapter</span><br><span class="line">Composite:    +60.9°C  </span><br><span class="line"></span><br><span class="line">coretemp-isa-0000</span><br><span class="line">Adapter: ISA adapter</span><br><span class="line">Package id 0:  +54.0°C  (high = +105.0°C, crit = +105.0°C)</span><br><span class="line">Core 0:        +54.0°C  (high = +105.0°C, crit = +105.0°C)</span><br><span class="line">Core 1:        +54.0°C  (high = +105.0°C, crit = +105.0°C)</span><br><span class="line">Core 2:        +54.0°C  (high = +105.0°C, crit = +105.0°C)</span><br><span class="line">Core 3:        +54.0°C  (high = +105.0°C, crit = +105.0°C)</span><br></pre></td></tr></table></figure><p>我们可以看出</p><p>iwlwifi_1-virtual-0是无线网卡温度<br>coretemp-isa-0000是 CPU 温度<br>使用命令lspci查询编号可知：<br>nvme-pci-0300是主硬盘温度</p><h2 id="定制显示温度内容"><a href="#定制显示温度内容" class="headerlink" title="定制显示温度内容"></a>定制显示温度内容</h2><p>PVE 的 WebUI 控制台是使用Node.js实现的，所以要修改对应的文件，使得其可以定期执行sensors命令，并将结果输出 Web 页面上。</p><h3 id="修改Nodes-pm，获取温度"><a href="#修改Nodes-pm，获取温度" class="headerlink" title="修改Nodes.pm，获取温度"></a>修改Nodes.pm，获取温度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /usr/share/perl5/PVE/API2/Nodes.pm</span><br></pre></td></tr></table></figure><p>增加的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$res-&gt;&#123;temperature&#125; = `sensors`;   # 获取 CPU 和 主板 的温度</span><br></pre></td></tr></table></figure><p>增加的位置<br>ctrl+w搜索my $dinfo = df(‘/‘, 1)</p><p>在搜索内容的上面添加，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">        $res-&gt;&#123;ksm&#125; = &#123;</span><br><span class="line">            shared =&gt; $meminfo-&gt;&#123;memshared&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        $res-&gt;&#123;swap&#125; = &#123;</span><br><span class="line">            free =&gt; $meminfo-&gt;&#123;swapfree&#125;,</span><br><span class="line">            total =&gt; $meminfo-&gt;&#123;swaptotal&#125;,</span><br><span class="line">            used =&gt; $meminfo-&gt;&#123;swapused&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        $res-&gt;&#123;pveversion&#125; = PVE::pvecfg::package() . &quot;/&quot; .</span><br><span class="line">            PVE::pvecfg::version_text();</span><br><span class="line"></span><br><span class="line">        $res-&gt;&#123;temperature&#125; = `sensors`;   # 获取 CPU 和 主板 的温度</span><br><span class="line"></span><br><span class="line">        my $dinfo = df(&#x27;/&#x27;, 1);     # output is bytes</span><br><span class="line"></span><br><span class="line">        $res-&gt;&#123;rootfs&#125; = &#123;</span><br><span class="line">            total =&gt; $dinfo-&gt;&#123;blocks&#125;,</span><br><span class="line">            avail =&gt; $dinfo-&gt;&#123;bavail&#125;,</span><br><span class="line">            used =&gt; $dinfo-&gt;&#123;used&#125;,</span><br><span class="line">            free =&gt; $dinfo-&gt;&#123;blocks&#125; - $dinfo-&gt;&#123;used&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return $res;</span><br><span class="line">  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="修改pvemanagerlib-js，显示温度"><a href="#修改pvemanagerlib-js，显示温度" class="headerlink" title="修改pvemanagerlib.js，显示温度"></a>修改pvemanagerlib.js，显示温度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/share/pve-manager/js/pvemanagerlib.js</span><br></pre></td></tr></table></figure><p>添加内容要根据自己的实际情况修改，注意逗号和括号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line">            itemId: &#x27;temperature&#x27;,</span><br><span class="line">            colspan: 2,</span><br><span class="line">            printBar: false,</span><br><span class="line">            title: gettext(&#x27;温度&#x27;),</span><br><span class="line">            textField: &#x27;temperature&#x27;,</span><br><span class="line">            renderer: function(value)&#123;</span><br><span class="line">                const p0 = value.match(/Package id 0.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const b0 = value.match(/temp1.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const b1 = value.match(/Composite.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const c0 = value.match(/Core 0.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const c1 = value.match(/Core 1.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const c2 = value.match(/Core 2.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const c3 = value.match(/Core 3.*?\+([\d\.]+)?/)[1];</span><br><span class="line"></span><br><span class="line">                return `CPU: $&#123;p0&#125;℃ | Core0: $&#123;c0&#125;℃ | Core1: $&#123;c1&#125;℃ | Core2: $&#123;c2&#125;℃ | Core3: $&#123;c3&#125;℃ | 无线网卡: $&#123;b0&#125;℃ | 系统盘: $&#123;b1&#125;℃ `</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己照猫画虎改就行了，不难<br>增加的位置<br>ctrl+w搜索itemId: ‘version’,<br>在内容的下面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            itemId: &#x27;version&#x27;,</span><br><span class="line">            colspan: 2,</span><br><span class="line">            printBar: false,</span><br><span class="line">            title: gettext(&#x27;PVE Manager Version&#x27;),</span><br><span class="line">            textField: &#x27;pveversion&#x27;,</span><br><span class="line">            value: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            itemId: &#x27;temperature&#x27;,</span><br><span class="line">            colspan: 2,</span><br><span class="line">            printBar: false,</span><br><span class="line">            title: gettext(&#x27;温度&#x27;),</span><br><span class="line">            textField: &#x27;temperature&#x27;,</span><br><span class="line">            renderer: function(value)&#123;</span><br><span class="line">                const p0 = value.match(/Package id 0.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const b0 = value.match(/temp1.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const b1 = value.match(/Composite.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const c0 = value.match(/Core 0.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const c1 = value.match(/Core 1.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const c2 = value.match(/Core 2.*?\+([\d\.]+)?/)[1];</span><br><span class="line">                const c3 = value.match(/Core 3.*?\+([\d\.]+)?/)[1];</span><br><span class="line"></span><br><span class="line">                return `CPU: $&#123;p0&#125;℃ | Core0: $&#123;c0&#125;℃ | Core1: $&#123;c1&#125;℃ | Core2: $&#123;c2&#125;℃ | Core3: $&#123;c3&#125;℃ | 无线网卡: $&#123;b0&#125;℃ | 系统盘: $&#123;b1&#125;℃ `</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    updateTitle: function() &#123;</span><br><span class="line">        var me = this;</span><br><span class="line">        var uptime = Proxmox.Utils.render_uptime(me.getRecordValue(&#x27;uptime&#x27;));</span><br><span class="line">        me.setTitle(me.pveSelNode.data.node + &#x27; (&#x27; + gettext(&#x27;Uptime&#x27;) + &#x27;: &#x27; + uptime + &#x27;)&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="修改完成，重启Web控制台"><a href="#修改完成，重启Web控制台" class="headerlink" title="修改完成，重启Web控制台"></a>修改完成，重启Web控制台</h3><p>systemctl restart pveproxy</p><p>注意：若温度的显示值为null，请打开开发者工具，在Console中进行查看</p><h2 id="懒人修改法"><a href="#懒人修改法" class="headerlink" title="懒人修改法"></a>懒人修改法</h2><p><a href="https://www.right.com.cn/forum/thread-6754687-1-1.html">点击这里，支持各种版本</a></p><h1 id="IMG文件创建虚拟机"><a href="#IMG文件创建虚拟机" class="headerlink" title="IMG文件创建虚拟机"></a>IMG文件创建虚拟机</h1><h2 id="创建虚拟机时选择无镜像"><a href="#创建虚拟机时选择无镜像" class="headerlink" title="创建虚拟机时选择无镜像"></a>创建虚拟机时选择无镜像</h2><h2 id="创建完成后分离并删除磁盘"><a href="#创建完成后分离并删除磁盘" class="headerlink" title="创建完成后分离并删除磁盘"></a>创建完成后分离并删除磁盘</h2><h2 id="进入宿主机输入指令"><a href="#进入宿主机输入指令" class="headerlink" title="进入宿主机输入指令"></a>进入宿主机输入指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qm importdisk 103 /var/lib/vz/template/iso/DS3615xs.img local-lvm</span><br><span class="line"></span><br><span class="line">//103为虚拟机代号</span><br><span class="line">///var/lib/vz/为存储镜像的磁盘的位置</span><br><span class="line">//DS3615xs.img 为需要创建虚拟机的镜像</span><br><span class="line">//local-lvm为所创建虚拟机的镜像的存储磁盘的名称</span><br></pre></td></tr></table></figure><h2 id="进入虚拟机磁盘管理双击磁盘选择添加"><a href="#进入虚拟机磁盘管理双击磁盘选择添加" class="headerlink" title="进入虚拟机磁盘管理双击磁盘选择添加"></a>进入虚拟机磁盘管理双击磁盘选择添加</h2><h2 id="进入虚拟机选项调整启动顺序"><a href="#进入虚拟机选项调整启动顺序" class="headerlink" title="进入虚拟机选项调整启动顺序"></a>进入虚拟机选项调整启动顺序</h2><h2 id="开机即可"><a href="#开机即可" class="headerlink" title="开机即可"></a>开机即可</h2>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/08/24/PVE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ubuntu配置及优化</title>
      <link>http://example.com/2023/06/24/Ubuntu%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BC%98%E5%8C%96/</link>
      <guid>http://example.com/2023/06/24/Ubuntu%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Sat, 24 Jun 2023 09:28:41 GMT</pubDate>
      
      <description>&lt;p&gt;关于ubuntu系统的优化与配置&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于ubuntu系统的优化与配置</p><span id="more"></span>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LINUX/">LINUX</category>
      
      
      <category domain="http://example.com/tags/Ubuntu/">Ubuntu</category>
      
      
      <comments>http://example.com/2023/06/24/Ubuntu%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BC%98%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FRP</title>
      <link>http://example.com/2023/06/24/FRP/</link>
      <guid>http://example.com/2023/06/24/FRP/</guid>
      <pubDate>Sat, 24 Jun 2023 09:00:34 GMT</pubDate>
      
      <description>&lt;p&gt;关于FRP的配置&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于FRP的配置</p><span id="more"></span>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LINUX/">LINUX</category>
      
      
      <category domain="http://example.com/tags/FRP/">FRP</category>
      
      
      <comments>http://example.com/2023/06/24/FRP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RT-Thread</title>
      <link>http://example.com/2023/06/24/RT-Thread/</link>
      <guid>http://example.com/2023/06/24/RT-Thread/</guid>
      <pubDate>Sat, 24 Jun 2023 08:59:53 GMT</pubDate>
      
      <description>&lt;p&gt;记录自己学习RT-Thread的过程&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>记录自己学习RT-Thread的过程<br><span id="more"></span></p><h1 id="RT-Thread版本"><a href="#RT-Thread版本" class="headerlink" title="RT-Thread版本"></a>RT-Thread版本</h1><h2 id="标准版"><a href="#标准版" class="headerlink" title="标准版"></a>标准版</h2><p>包含内核，组件和服务，上层应用包</p><h2 id="Nano版"><a href="#Nano版" class="headerlink" title="Nano版"></a>Nano版</h2><p>包含内核，可移植组件</p><h2 id="Smart版"><a href="#Smart版" class="headerlink" title="Smart版"></a>Smart版</h2><p>将硬件层与软件层分开，类似Linux</p><h1 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h1><p>负责线程管理thread.c，时钟管理clock.c,timer.c，中断管理，内存管理mem.c,memheap.c等，以及线程之间的同步与通信ipc.c,对象管理object.c,实时调度器schedule.c，设备管理device.c</p><h1 id="内核启动"><a href="#内核启动" class="headerlink" title="内核启动"></a>内核启动</h1><h2 id="汇编启动"><a href="#汇编启动" class="headerlink" title="汇编启动"></a>汇编启动</h2><p>Reset_Handler—&gt;LoopCopyDataInit—&gt;LoopFillZerobss—&gt;SystemInit()</p><h2 id="C文件启动"><a href="#C文件启动" class="headerlink" title="C文件启动"></a>C文件启动</h2><p>SystemInit()—&gt;__libc_init_array()—&gt;entry()—&gt;rtthread_startup()</p><h2 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h2><p>rtthread启动过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">intrtthread_startup(void)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    rt_hw_interrupt_disable();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*板级初始化：需在该函数内部进行系统堆的初始化*/</span><br><span class="line"></span><br><span class="line">    rt_hw_board_init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*打印RT-Thread版本信息*/</span><br><span class="line"></span><br><span class="line">    rt_show_version();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*定时器初始化*/</span><br><span class="line"></span><br><span class="line">    rt_system_timer_init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*调度器初始化*/</span><br><span class="line"></span><br><span class="line">    rt_system_scheduler_init();</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ifdef RT_USING_SIGNALS</span></span><br><span class="line"></span><br><span class="line">    /*信号初始化*/</span><br><span class="line"></span><br><span class="line">    rt_system_signal_init();</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">endif</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*由此创建一个用户main线程mian_thread_entry*/</span><br><span class="line"></span><br><span class="line">    rt_application_init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*定时器线程初始化创建线程rt_thread_timer_entry*/</span><br><span class="line"></span><br><span class="line">    rt_system_timer_thread_init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*空闲线程初始化创建线程rt_thread_idle_entry*/</span><br><span class="line"></span><br><span class="line">    rt_thread_idle_init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*启动调度器*/</span><br><span class="line"></span><br><span class="line">    rt_system_scheduler_start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*不会执行至此*/</span><br><span class="line"></span><br><span class="line">    return0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程启动"><a href="#线程启动" class="headerlink" title="线程启动"></a>线程启动</h2><p>首先在系统启动的时候就已经创建了三个线程：</p><p>mian_thread_entry</p><p>rt_thread_timer_entry</p><p>rt_thread_idle_entry</p><h3 id="rt-application-init"><a href="#rt-application-init" class="headerlink" title="rt_application_init()"></a>rt_application_init()</h3><h4 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h4><p>根据是否使用堆会有两种创建方式:</p><h5 id="使用堆heap"><a href="#使用堆heap" class="headerlink" title="使用堆heap"></a>使用堆heap</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rt_thread_create(<span class="string">&quot;main&quot;</span>, main_thread_entry, RT_NULL,</span><br><span class="line"></span><br><span class="line">                           RT_MAIN_THREAD_STACK_SIZE, RT_MAIN_THREAD_PRIORITY, <span class="number">20</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>动态调度方式创建</p><h5 id="不使用堆heap"><a href="#不使用堆heap" class="headerlink" title="不使用堆heap"></a>不使用堆heap</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rt_thread_init(tid, <span class="string">&quot;main&quot;</span>, main_thread_entry, RT_NULL,</span><br><span class="line"></span><br><span class="line">                            main_stack, <span class="keyword">sizeof</span>(main_stack), RT_MAIN_THREAD_PRIORITY, <span class="number">20</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>静态创建</p><h4 id="进入线程启动器函数启动线程"><a href="#进入线程启动器函数启动线程" class="headerlink" title="进入线程启动器函数启动线程"></a>进入线程启动器函数启动线程</h4><p>rt_thread_startup(tid)</p><h4 id="进入就绪状态并运行线程"><a href="#进入就绪状态并运行线程" class="headerlink" title="进入就绪状态并运行线程"></a>进入就绪状态并运行线程</h4><p>main_thread_entry()</p><h4 id="线程进入主函数"><a href="#线程进入主函数" class="headerlink" title="线程进入主函数"></a>线程进入主函数</h4><p>main()</p><h3 id="rt-thread-timer-entry"><a href="#rt-thread-timer-entry" class="headerlink" title="rt_thread_timer_entry()"></a>rt_thread_timer_entry()</h3><h3 id="rt-thread-idle-entry"><a href="#rt-thread-idle-entry" class="headerlink" title="rt_thread_idle_entry()"></a>rt_thread_idle_entry()</h3><p>退出线程,cleanup函数清理资源</p><h2 id="用户线程的创建"><a href="#用户线程的创建" class="headerlink" title="用户线程的创建"></a>用户线程的创建</h2><h3 id="线程结构体-线程控制块"><a href="#线程结构体-线程控制块" class="headerlink" title="线程结构体(线程控制块)"></a>线程结构体(线程控制块)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_thread</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* rt object */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>        name[RT_NAME_MAX];                      <span class="comment">/**&lt; the name of thread */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  type;                                   <span class="comment">/**&lt; type of object */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  flags;                                  <span class="comment">/**&lt; thread&#x27;s flags */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RT_USING_MODULE</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>       *module_id;                              <span class="comment">/**&lt; id of application module */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_list_t</span>   <span class="built_in">list</span>;                                   <span class="comment">/**&lt; the object list */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_list_t</span>   tlist;                                  <span class="comment">/**&lt; the thread list */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* stack point and entry */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>       *sp;                                     <span class="comment">/**&lt; stack point */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>       *entry;                                  <span class="comment">/**&lt; entry */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>       *parameter;                              <span class="comment">/**&lt; parameter */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>       *stack_addr;                             <span class="comment">/**&lt; stack address */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint32_t</span> stack_size;                             <span class="comment">/**&lt; stack size */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* error code */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_err_t</span>    error;                                  <span class="comment">/**&lt; error code */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  stat;                                   <span class="comment">/**&lt; thread status */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RT_USING_SMP <span class="comment">//判断是否使用多核</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  bind_cpu;                               <span class="comment">/**&lt; thread is bind to cpu */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  oncpu;                                  <span class="comment">/**&lt; process on cpu` */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint16_t</span> scheduler_lock_nest;                    <span class="comment">/**&lt; scheduler lock count */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint16_t</span> cpus_lock_nest;                         <span class="comment">/**&lt; cpus lock count */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint16_t</span> critical_lock_nest;                     <span class="comment">/**&lt; critical lock count */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/*RT_USING_SMP*/</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* priority */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  current_priority;                       <span class="comment">/**&lt; current priority */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  init_priority;                          <span class="comment">/**&lt; initialized priority */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> RT_THREAD_PRIORITY_MAX &gt;32</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  number;</span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  high_mask;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint32_t</span> number_mask;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifdefined(RT_USING_EVENT)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* thread event */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint32_t</span> event_set;</span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint8_t</span>  event_info;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifdefined(RT_USING_SIGNALS)</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_sigset_t</span>     sig_pending;                        <span class="comment">/**&lt; the pending signals */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_sigset_t</span>     sig_mask;                           <span class="comment">/**&lt; the mask bits of signal */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RT_USING_SMP</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>            *sig_ret;                           <span class="comment">/**&lt; the return stack pointer from signal */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_sighandler_t</span> *sig_vectors;                       <span class="comment">/**&lt; vectors of signal handler */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>            *si_list;                           <span class="comment">/**&lt; the signal infor list */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_ubase_t</span>  init_tick;                              <span class="comment">/**&lt; thread&#x27;s initialized tick */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_ubase_t</span>  remaining_tick;                         <span class="comment">/**&lt; remaining tick */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RT_USING_CPU_USAGE</span></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_uint64_t</span>  duration_tick;                          <span class="comment">/**&lt; cpu usage tick */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rt_timer</span> <span class="title">thread_timer</span>;</span>                       <span class="comment">/**&lt; built-in thread timer */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> (*cleanup)(<span class="keyword">struct</span> rt_thread *tid);             <span class="comment">/**&lt; cleanup function when thread exit */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* light weight process if present */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RT_USING_LWP</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>        *lwp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">rt_ubase_t</span> user_data;                             <span class="comment">/**&lt; private user data beyond this thread */</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h3><h4 id="线程栈"><a href="#线程栈" class="headerlink" title="线程栈"></a>线程栈</h4><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><h5 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h5><p>当线程刚开始创建还没开始运行时就处于初始状态；在初始状态下，线程不参与调度。此状态在 RT-Thread 中的宏定义为 RT_THREAD_INIT</p><h5 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h5><p>在就绪状态下，线程按照优先级排队，等待被执行；一旦当前线程运行完毕让出处理器，操作系统会马上寻找最高优先级的就绪态线程运行。此状态在 RT-Thread 中的宏定义为 RT_THREAD_READY</p><h5 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h5><p>线程当前正在运行。在单核系统中，只有 rt_thread_self() 函数返回的线程处于运行状态；在多核系统中，可能就不止这一个线程处于运行状态。此状态在 RT-Thread 中的宏定义为 RT_THREAD_RUNNING</p><h5 id="挂起状态"><a href="#挂起状态" class="headerlink" title="挂起状态"></a>挂起状态</h5><p>也称阻塞态。它可能因为资源不可用而挂起等待，或线程主动延时一段时间而挂起。在挂起状态下，线程不参与调度。此状态在 RT-Thread 中的宏定义为 RT_THREAD_SUSPEND</p><h5 id="关闭状态"><a href="#关闭状态" class="headerlink" title="关闭状态"></a>关闭状态</h5><p>当线程运行结束时将处于关闭状态。关闭状态的线程不参与线程的调度。此状态在 RT-Thread 中的宏定义为 RT_THREAD_CLOSE</p><h4 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h4><p>如果线程优先级相同则通过时间片,一个线程运行几个时钟周期再切换给另一个</p><h3 id="线程状态切换"><a href="#线程状态切换" class="headerlink" title="线程状态切换"></a>线程状态切换</h3><p><img src="https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/thread/figures/04thread_sta.png" alt="Alt text"></p><h3 id="线程操作"><a href="#线程操作" class="headerlink" title="线程操作"></a>线程操作</h3><h4 id="线程创建与删除"><a href="#线程创建与删除" class="headerlink" title="线程创建与删除"></a>线程创建与删除</h4><p>动态创建:系统分配栈与句柄</p><p>静态创建:用户自行分配栈和句柄</p><h5 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rt_thread_create(constchar *name,<span class="comment">//名字</span></span><br><span class="line"></span><br><span class="line">                 <span class="type">void</span> (*entry)(<span class="type">void</span> *parameter),<span class="comment">//线程函数入口</span></span><br><span class="line"></span><br><span class="line">                 <span class="type">void</span>       *parameter,<span class="comment">//传递给线程函数的参数</span></span><br><span class="line"></span><br><span class="line">                 rt_uint32_tstack_size,<span class="comment">//线程栈大小</span></span><br><span class="line"></span><br><span class="line">                 <span class="type">rt_uint8_t</span>  priority,<span class="comment">//优先级,stm32为32个</span></span><br><span class="line"></span><br><span class="line">                 rt_uint32_ttick);<span class="comment">//时间片节拍数量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回值为rt_thread_t,为结构体指针,返回线程控制块</p><h5 id="线程的删除"><a href="#线程的删除" class="headerlink" title="线程的删除"></a>线程的删除</h5><p>rt_thread_delete(rt_thread_t thread);</p><p>返回值为rt_err_t,线程错误码</p><h2 id="RT-Thread程序内存分布"><a href="#RT-Thread程序内存分布" class="headerlink" title="RT_Thread程序内存分布"></a>RT_Thread程序内存分布</h2><p>一般 MCU 包含的存储空间有：片内 Flash 与片内 RAM，RAM 相当于内存，Flash 相当于硬盘。编译器会将一个程序分类为好几个部分，分别存储在 MCU 不同的存储区。</p><p>Keil 工程在编译完之后，会有相应的程序所占用的空间提示信息，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">linking...</span><br><span class="line"></span><br><span class="line">Program Size: Code=<span class="number">48008</span> RO-data=<span class="number">5660</span> RW-data=<span class="number">604</span> ZI-data=<span class="number">2124</span></span><br><span class="line"></span><br><span class="line">After Build - User command \#<span class="number">1</span>: fromelf --bin.\\build\\rtthread-stm32.axf--output rtthread.bin</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;.\\build\\rtthread-stm32.axf&quot;</span> - <span class="number">0</span>Error(s), <span class="number">0</span>Warning(s).</span><br><span class="line"></span><br><span class="line">Build Time Elapsed: <span class="number">00</span>:<span class="number">00</span>:<span class="number">07</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面提到的 Program Size 包含以下几个部分：</p><p>1）Code：代码段，存放程序的代码部分；</p><p>2）RO-data：只读数据段，存放程序中定义的常量；</p><p>3）RW-data：读写数据段，存放初始化为非 0 值的全局变量；</p><p>4）ZI-data：0 数据段，存放未初始化的全局变量及初始化为 0 的变量；</p><p>编译完工程会生成一个. map 的文件，该文件说明了各个函数占用的尺寸和地址，在文件的最后几行也说明了上面几个字段的关系：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Total RO <span class="title function_">Size</span> <span class="params">(Code + RO Data)</span> 53668 <span class="params">( <span class="number">52.41</span>kB)</span></span><br><span class="line"></span><br><span class="line">Total RW <span class="title function_">Size</span> <span class="params">(RW Data + ZI Data)</span> 2728 <span class="params">( <span class="number">2.66</span>kB)</span></span><br><span class="line"></span><br><span class="line">Total ROM <span class="title function_">Size</span> <span class="params">(Code + RO Data + RW Data)</span> 53780 <span class="params">( <span class="number">52.52</span>kB)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1）RO Size 包含了 Code 及 RO-data，表示程序占用 Flash 空间的大小；</p><p>2）RW Size 包含了 RW-data 及 ZI-data，表示运行时占用的 RAM 的大小；</p><p>3）ROM Size 包含了 Code、RO-data 以及 RW-data，表示烧写程序所占用的 Flash 空间的大小；</p><h2 id="RT-Thread-自动初始化机制"><a href="#RT-Thread-自动初始化机制" class="headerlink" title="RT-Thread 自动初始化机制"></a>RT-Thread 自动初始化机制</h2><p>INIT_BOARD_EXPORT(rt_hw_usart_init);    /<em> 使用组件自动初始化机制 </em>/</p><h1 id="IO设备"><a href="#IO设备" class="headerlink" title="IO设备"></a>IO设备</h1><p><img src="https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/device/figures/io-dev.png" alt="Alt text"></p><p><img src="https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/device/figures/io-fun-call.png" alt="Alt text"></p><p><img src="https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/device/figures/io-dev-ex.png" alt="Alt text"></p><h2 id="创建设备"><a href="#创建设备" class="headerlink" title="创建设备"></a>创建设备</h2><h2 id="注册设备"><a href="#注册设备" class="headerlink" title="注册设备"></a>注册设备</h2><h2 id="访问设备"><a href="#访问设备" class="headerlink" title="访问设备"></a>访问设备</h2><h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><h2 id="applications应用层"><a href="#applications应用层" class="headerlink" title="applications应用层"></a>applications应用层</h2><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h2 id="drivers驱动层"><a href="#drivers驱动层" class="headerlink" title="drivers驱动层"></a>drivers驱动层</h2><h2 id="libraries芯片硬件层"><a href="#libraries芯片硬件层" class="headerlink" title="libraries芯片硬件层"></a>libraries芯片硬件层</h2><p>包含有Hal库驱动和CMSIS等</p><h2 id="rt-thread系统层"><a href="#rt-thread系统层" class="headerlink" title="rt_thread系统层"></a>rt_thread系统层</h2><h2 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      <category domain="http://example.com/tags/OS/">OS</category>
      
      
      <comments>http://example.com/2023/06/24/RT-Thread/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rockpi4B+</title>
      <link>http://example.com/2023/06/24/Rockpi4B+/</link>
      <guid>http://example.com/2023/06/24/Rockpi4B+/</guid>
      <pubDate>Sat, 24 Jun 2023 08:59:32 GMT</pubDate>
      
      <description>&lt;p&gt;rock4B+的设置和配置服务器的教程&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>rock4B+的设置和配置服务器的教程</p><span id="more"></span><h1 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h1><p>最开始是外国源，为了提高速度，不要下载别的东西，只安装wget</p><p>sudo su<br>sudo apt update<br>sudo apt install wget</p><h1 id="安装cockpit（端口9090）"><a href="#安装cockpit（端口9090）" class="headerlink" title="安装cockpit（端口9090）"></a>安装cockpit（端口9090）</h1><p>sudo apt-get install cockpit<br>sudo apt-get install cockpit-machines</p><h1 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h1><p>wget -O install.sh <a href="https://download.bt.cn/install/install-ubuntu_6.0.sh">https://download.bt.cn/install/install-ubuntu_6.0.sh</a> &amp;&amp; bash install.sh ed8484bec</p><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><p>sudo apt install apt-transport-https ca-certificates<br>sudo nano /etc/apt/sources.list</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span></span></span><br><span class="line"></span><br><span class="line">deb https://security.debian.org/debian-security buster/updates main contrib non-free</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://security.debian.org/debian-security buster/updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">deb http://apt.radxa.com/buster-testing/ buster main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>wget -O -  apt.radxa.com/buster-testing/public.key | sudo apt-key add -</p><p>sudo apt-get update</p><h1 id="装radxa硬件驱动"><a href="#装radxa硬件驱动" class="headerlink" title="装radxa硬件驱动"></a>装radxa硬件驱动</h1><p>sudo apt-get install -y rockchip-overlay &amp;&amp; sudo apt-get install -y rockpi4-dtbo libmraa</p><h1 id="改地区"><a href="#改地区" class="headerlink" title="改地区"></a>改地区</h1><p>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</p><h1 id="安装wifi蓝牙GPU驱动"><a href="#安装wifi蓝牙GPU驱动" class="headerlink" title="安装wifi蓝牙GPU驱动"></a>安装wifi蓝牙GPU驱动</h1><p>sudo apt-get install -y broadcom-wifibt-firmware<br>systemctl start bluetooth<br>pulseaudio —start<br>sudo apt install -y git gcc g++ libpng-dev libjpeg-dev pkg-config libx11-dev libdrm-dev libgbm-dev libgbm1 libudev-dev<br>mkdir -p /home/rock/work<br>cd /home/rock/work<br>git clone <a href="https://github.com/glmark2/glmark2.git">https://github.com/glmark2/glmark2.git</a><br>cd glmark2/<br>./waf configure —with-flavors=drm-glesv2<br>./waf build -j 4<br>./waf install<br>sudo apt install -y rockchip-mali-midgard14=1.6-2<br>sudo apt install -y rockchip-mali-midgard-dev=1.6-2<br>glmark2-es2-drm<br>apt-get install golang emacs</p><h1 id="hdmi热插拔"><a href="#hdmi热插拔" class="headerlink" title="hdmi热插拔"></a>hdmi热插拔</h1><p>sudo chmod +x /usr/local/bin/drm-hotplug.sh</p><h1 id="超频"><a href="#超频" class="headerlink" title="超频"></a>超频</h1><p>nano /boot/hw_intfc.conf</p><p>setting cpu frequency over-2GHz</p><p>   intfc:dtoverlay=cpufreq</p><h1 id="wifi模式切换"><a href="#wifi模式切换" class="headerlink" title="wifi模式切换"></a>wifi模式切换</h1><p>sudo apt-get install git cmake hostapd<br>git clone <a href="https://github.com/oblique/create_ap">https://github.com/oblique/create_ap</a><br>cd create_ap<br>sudo make install<br>wget <a href="https://raw.githubusercontent.com/radxa/rkwifibt/master/brcm_tools/dhd_priv.c">https://raw.githubusercontent.com/radxa/rkwifibt/master/brcm_tools/dhd_priv.c</a><br>gcc dhd_priv.c -o dhd_priv<br>sudo ./dhd_priv channel 6<br>sudo ./dhd_priv monitor 1</p><h1 id="安装樱花frpc"><a href="#安装樱花frpc" class="headerlink" title="安装樱花frpc"></a>安装樱花frpc</h1><p>cd /usr/local/bin<br>sudo wget -O frpc <a href="https://getfrp.sh/d/frpc_linux_arm64">https://getfrp.sh/d/frpc_linux_arm64</a><br>sudo chmod 755 frpc<br>ls -ls frpc<br>md5sum frpc<br>sudo mkdir -p /usr/local/etc/natfrp<br>sudo nano /etc/systemd/system/frpc@.service</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=SakuraFrp Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=idle</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=60s</span><br><span class="line">ExecStart=/usr/local/bin/frpc -f %i</span><br><span class="line">WorkingDirectory=/usr/local/etc/natfrp</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开后直接crtl c退出就可以启动<br>systemctl daemon-reload<br>systemctl enable frpc@7xk345t4zdqx2d2345fsxx91svfs7e5x:7402311<br>外网ip：202.182.122.24:63979<br>frp-fly.top:63979</p><p>配置systemctl进行开机启动</p><p>创建frpc.service服务</p><p>sudo nano /lib/systemd/system/frpc.service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">服务描述</span></span><br><span class="line"></span><br><span class="line">Description=frpcservice</span><br><span class="line"></span><br><span class="line">After=network.targetsyslog.target</span><br><span class="line"></span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=simple</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行命令</span></span><br><span class="line"></span><br><span class="line">ExecStart=/usr/local/frpc/frpc-c/usr/local/frpc/frpc.ini</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"></span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重载</p><p>systemctl daemon-reload</p><h1 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h1><p>sudo systemctl status frpc</p><p>设置开机自动启动</p><p>sudo systemctl enable frpc</p><h1 id="安装并配置clash和控制面板"><a href="#安装并配置clash和控制面板" class="headerlink" title="安装并配置clash和控制面板"></a>安装并配置clash和控制面板</h1><p>wget <a href="https://github.com/Dreamacro/clash/releases/download/v1.10.6/clash-linux-armv64-v1.14.6.gz">https://github.com/Dreamacro/clash/releases/download/v1.10.6/clash-linux-armv64-v1.14.6.gz</a><br>gunzip linux-armv64-v1.14.6.gz<br>mv linux-armv64-v1.14.6 clash<br>sudo mv clash /usr/local/bin<br>sudo chmod a+x /usr/local/bin/clash<br>mkdir ~/.config/clash<br>nano ~/.config/clash/config.yaml<br>放入配置文件即可</p><p>mv Country.mmdb ~/.config/clash<br>sudo nano /etc/environment</p><p>export http_proxy=”<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a>“<br>export https_proxy=”<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a>“<br>export no_proxy=”localhost, 127.0.0.1, *edu.cn”</p><p>sudo visudo</p><p>Defaults env_keep+=”http_proxy https_proxy no_proxy”</p><p>sudo nano /etc/apt/apt.conf.d/10proxy</p><p>Acquire::http::Proxy “<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890/</a>“;</p><p>nano ~/.gitconfig</p><p>[http]<br>  proxy=<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a><br>[https]<br>  proxy=<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a></p><p>crontab -e</p><p>@reboot /usr/local/bin/clash</p><p>cd ~/.config/clash<br>clash &amp;<br>git clone <a href="https://github.com/Dreamacro/clash-dashboard.git">https://github.com/Dreamacro/clash-dashboard.git</a><br>cd ~/.config/clash/clash-dashboard<br>git checkout -b gh-pages origin/gh-pages<br>nano ~/.config/clash/config.yaml<br>头部添加：</p><p>external-ui: clash-dashboard<br>external-controller: 127.0.0.1:9090</p><p><a href="http://127.0.0.1:9090/ui">http://127.0.0.1:9090/ui</a></p><h1 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h1><p>sudo apt install xfce4 xorg xrdp xorgxrdp<br>touch ~/.xsession<br>echo xfce4-session &gt;~/.xsession<br>sudo chown rock:rock ~/.xsession</p><h1 id="改中文"><a href="#改中文" class="headerlink" title="改中文"></a>改中文</h1><p>sudo apt install fcitx5 locales fonts-noto-cjk fonts-noto-cjk-extra<br>sudo dpkg-reconfigure locales<br>sudo apt-get install chromium-l10n</p><h1 id="Docker-运行openwrt"><a href="#Docker-运行openwrt" class="headerlink" title="Docker 运行openwrt"></a>Docker 运行openwrt</h1><p>sudo chmod 666 /var/run/docker.sock<br>sudo ip link set eth0 promisc on</p><p>sudo nano /etc/rc.local</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set eth0 promisc on &amp;</span><br></pre></td></tr></table></figure><p>docker network create -d macvlan —subnet=192.168.1.0/24 —gateway=192.168.1.1 -o parent=eth0 macnet<br>docker network list<br>mkdir -p /etc/systemd/system/docker.service.d<br>nano /etc/systemd/system/docker.service.d/http-proxy.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://proxy-addr:proxy-port&quot;       #代理服务器地址</span><br><span class="line">Environment=&quot;HTTPS_PROXY=http://proxy-addr:proxy-port&quot;      #https</span><br><span class="line">Environment=&quot;NO_PROXY=localhost,127.0.0.0/8,docker-registry.example.com,.corp&quot;                #哪些地址不需要走代理</span><br></pre></td></tr></table></figure><p>systemctl daemon-reload<br>systemctl restart docker<br>sudo systemctl show —property=Environment docker<br>docker run —restart always —name openwrt -d —network macnet —privileged sulinggg/openwrt:armv8 /sbin/init<br>docker ps -a<br>docker exec -it d61d5edd67d4 bash<br>vim /etc/config/network<br>将后面三项改成自己的ip</p><p>/etc/init.d/network restart</p><p>直接浏览器访问刚刚设置的ip和端口<br>密码默认passwd</p><p>在网络LAN口中关闭桥接接口</p><p>网络防火墙自定义规则中添加<br>iptables -t nat -I POSTROUTING -j MASQUERADE</p><p>在网络Turbo ACC网络加速中勾选DNS缓存</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LINUX/">LINUX</category>
      
      
      <category domain="http://example.com/tags/ROCK4B/">ROCK4B+</category>
      
      
      <comments>http://example.com/2023/06/24/Rockpi4B+/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo</title>
      <link>http://example.com/2023/06/24/Hexo/</link>
      <guid>http://example.com/2023/06/24/Hexo/</guid>
      <pubDate>Sat, 24 Jun 2023 08:58:09 GMT</pubDate>
      
      <description>&lt;p&gt;关于Hexo的配置与部署&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于Hexo的配置与部署</p><span id="more"></span><h1 id="安装-Node-js-和-Git。"><a href="#安装-Node-js-和-Git。" class="headerlink" title="安装 Node.js 和 Git。"></a>安装 Node.js 和 Git。</h1><ul><li>Node.js：<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn">https://<strong>nodejs.org/zh-cn</strong></a></li><li>Git：<a href="https://link.zhihu.com/?target=https%3A//git-scm.com/downloads">https://<strong>git-scm.com/downloads</strong></a></li></ul><h1 id="连接-Github"><a href="#连接-Github" class="headerlink" title="连接 Github"></a>连接 Github</h1><p>右键 -&gt; Git Bash Here， <strong>设置用户名和邮箱</strong> ：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><h2 id="创建-SSH-密匙-："><a href="#创建-SSH-密匙-：" class="headerlink" title="创建 SSH 密匙 ："></a>创建 SSH 密匙 ：</h2><p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p><h2 id="添加密匙："><a href="#添加密匙：" class="headerlink" title="添加密匙："></a>添加密匙：</h2><p>进入 [C:\Users\用户名\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，点击头像，选择 Settings ，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><h2 id="验证连接："><a href="#验证连接：" class="headerlink" title="验证连接："></a>验证连接：</h2><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>使用 npm 一键安装 Hexo 博客程序：</p><p>npm install -g hexo-cli<br>npm install hexo-deployer-git —save<br>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><p>deploy:<br>  type: git<br>  repository: git@github.com:用户名/用户名.github.io.git<br>  branch: master</p><h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><p>右键打开 Git Bash Here，创建博文：<br>hexo new “My New Post”<br>hexo g   # 生成页面<br>hexo d   # 部署发布</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LINUX/">LINUX</category>
      
      
      <category domain="http://example.com/tags/Hexo/">Hexo</category>
      
      
      <comments>http://example.com/2023/06/24/Hexo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Raspberry_pico</title>
      <link>http://example.com/2023/06/24/Raspberry-pico/</link>
      <guid>http://example.com/2023/06/24/Raspberry-pico/</guid>
      <pubDate>Sat, 24 Jun 2023 08:56:33 GMT</pubDate>
      
      <description>&lt;p&gt;关于树莓派pico的环境搭建与开发&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于树莓派pico的环境搭建与开发<br><span id="more"></span></p><h1 id="Ubuntu-C-C"><a href="#Ubuntu-C-C" class="headerlink" title="Ubuntu C/C++"></a>Ubuntu C/C++</h1><h2 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h2><p> sudo apt install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential python3-tk</p><h2 id="下载-pico-sdk-和-pico-examples"><a href="#下载-pico-sdk-和-pico-examples" class="headerlink" title="下载 pico-sdk 和 pico-examples"></a>下载 pico-sdk 和 pico-examples</h2><p>cd ~<br>mkdir pico<br>cd pico<br>git clone -b master <a href="https://github.com/raspberrypi/pico-sdk.git">https://github.com/raspberrypi/pico-sdk.git</a><br>cd pico-sdk<br>git submodule update —init<br>cd ~/pico<br>git clone -b master <a href="https://github.com/raspberrypi/pico-examples.git">https://github.com/raspberrypi/pico-examples.git</a></p><h2 id="下载-pico-project-generator"><a href="#下载-pico-project-generator" class="headerlink" title="下载 pico-project-generator"></a>下载 pico-project-generator</h2><p>cd ~/pico<br>git clone <a href="https://github.com/raspberrypi/pico-project-generator.git">https://github.com/raspberrypi/pico-project-generator.git</a></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>echo “export PICO_SDK_PATH=/home/$USER/pico/pico-sdk” &gt;&gt; .bashrc</p><h2 id="安装-VSCode-插件"><a href="#安装-VSCode-插件" class="headerlink" title="安装 VSCode 插件"></a>安装 VSCode 插件</h2><p>code —install-extension marus25.cortex-debug<br>code —install-extension ms-vscode.cmake-tools<br>code —install-extension ms-vscode.cpptools</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>cd pico-project-generator</p><p>./pico-progect.py —gui</p><p>手动生成工程</p><p>cd build</p><p>make -j(核心数)  eg：make -j4</p><p>将uf2文件拖入pico即可</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf">https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf</a><br><a href="https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-c-sdk.pdf">https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-c-sdk.pdf</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      <category domain="http://example.com/tags/Pico/">Pico</category>
      
      
      <comments>http://example.com/2023/06/24/Raspberry-pico/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ESP_AT串口透传</title>
      <link>http://example.com/2023/06/24/ESP-AT%E4%B8%B2%E5%8F%A3%E9%80%8F%E4%BC%A0/</link>
      <guid>http://example.com/2023/06/24/ESP-AT%E4%B8%B2%E5%8F%A3%E9%80%8F%E4%BC%A0/</guid>
      <pubDate>Sat, 24 Jun 2023 08:55:53 GMT</pubDate>
      
      <description>&lt;p&gt;配置ESP系列AT指令进行wifi串口穿透的教程&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>配置ESP系列AT指令进行wifi串口穿透的教程</p><span id="more"></span><h1 id="初始配置命令"><a href="#初始配置命令" class="headerlink" title="初始配置命令"></a>初始配置命令</h1><p>ESP32（AT）：AT+CWJAP=”XXXX“,”XXXXXXX“ //热点的SSID和密码<br>ESP32（AT）：AT+CIPSTA? //查看ip<br>串口开启tcp的server模式输入esp的ip和80端口<br>设置自己的ip并随便指定一个端口打开监听</p><h1 id="每次上电需要执行的命令"><a href="#每次上电需要执行的命令" class="headerlink" title="每次上电需要执行的命令"></a>每次上电需要执行的命令</h1><p>ESP32（AT）：AT+CIPSTART=”TCP”,”192.168.1.236”,11451（手机的ip和手机指定的端口）<br>此时手机发送的数据，esp32即可收到<br>收到格式为：+IPD,6:DATA     //+IPD,数据长度:数据<br>ESP32（AT）：AT+CIPMODE=1 //设置传输模式为透传模式,此方式不能写进flash<br>此时收到格式为：DATA     //数据，直接就是数据<br>ESP32（AT）：AT+CIPSEND //数据发送<br>此时esp32发送的数据，手机即可收到<br>ESP32（AT）：+++ //不带换行符，结束透传</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      <category domain="http://example.com/tags/ESP32-AT/">ESP32 AT</category>
      
      
      <comments>http://example.com/2023/06/24/ESP-AT%E4%B8%B2%E5%8F%A3%E9%80%8F%E4%BC%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Windows</title>
      <link>http://example.com/2023/01/20/Windows/</link>
      <guid>http://example.com/2023/01/20/Windows/</guid>
      <pubDate>Thu, 19 Jan 2023 17:04:51 GMT</pubDate>
      
      <description>&lt;p&gt;Windows常用设置&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Windows常用设置<br><span id="more"></span></p><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><p>cmd输入winver</p><h2 id="查看文件MD5码"><a href="#查看文件MD5码" class="headerlink" title="查看文件MD5码"></a>查看文件MD5码</h2><p>certutil -hashfile 文件路径名称 MD5</p><h2 id="win11安装系统应用"><a href="#win11安装系统应用" class="headerlink" title="win11安装系统应用"></a>win11安装系统应用</h2><p>1.以管理员运行powershell<br>2.输入Get-AppxPackage -allusers | Select Name, PackageFullName<br>3.找到需要安装的应用后面的应用版本<br>4输入Add-appxpackage -register “C:\Program Files\WindowsApps\【应用版本】\appxmanifest.xml” -disabledevelopmentmod即可</p><h1 id="修复Win11更新的BUG"><a href="#修复Win11更新的BUG" class="headerlink" title="修复Win11更新的BUG"></a>修复Win11更新的BUG</h1><p>1.网站uupdump.net可以下载最新版本</p><p>2.进入注册表<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\wuauserv\Parameters<br>找到ServiceDll<br>win11将数据改为%systemroot%\system32\wuauserv.dll，<br>win10将数据改为%systemroot%\system32\wuaueng.dll<br>如果还是找不到<br>进入”C:\WINDOWS\System32\wuauserv.dll”看是否存在wuauserv.dll或者wuaueng.dll，<br>如果不存在的话可能是其他软件删除了，需自行下载或者从别的电脑拷贝放进去就好了</p><h1 id="配置FRPC服务"><a href="#配置FRPC服务" class="headerlink" title="配置FRPC服务"></a>配置FRPC服务</h1><h2 id="设置启动脚本"><a href="#设置启动脚本" class="headerlink" title="设置启动脚本"></a>设置启动脚本</h2><p>创建文件：<br>start_frpc.vbs<br>写入脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateObject(&quot;WScript.Shell&quot;).Run &quot;&quot;&quot;D:\Program Files\frp_0.38.0_windows_amd64\frpc.exe&quot;&quot;&quot; &amp; &quot;-c&quot; &amp; &quot;&quot;&quot;D:\Program Files\frp_0.38.0_windows_amd64\frpc.ini&quot;&quot;&quot;,0</span><br></pre></td></tr></table></figure><p>双击就可启动frpc，可在资源管理器中看到frpc.exe已启动;</p><h2 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><p>“win+r”输入shell:startup就会自动打开启动文件夹。<br>将文件放入即可（一般为：C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup）</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Windows/">Windows</category>
      
      
      <category domain="http://example.com/tags/Win11/">Win11</category>
      
      
      <comments>http://example.com/2023/01/20/Windows/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>网络基础</title>
      <link>http://example.com/2023/01/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
      <guid>http://example.com/2023/01/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Thu, 19 Jan 2023 06:25:47 GMT</pubDate>
      
      <description>&lt;p&gt;关于光猫与路由器设置的简单教程&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于光猫与路由器设置的简单教程</p><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="光猫"><a href="#光猫" class="headerlink" title="光猫"></a>光猫</h2><p>进行光电转换的设备，最纯净的光猫是毛棒，常见的运营商的光猫是集成了光猫路由器交换机等功能的设备。</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>进行拨号NAT转换的设备</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>拓展接口的设备</p><h2 id="AP"><a href="#AP" class="headerlink" title="AP"></a>AP</h2><p>同交换机只不过是通过无线网的方式来拓展接口</p><h1 id="光猫-1"><a href="#光猫-1" class="headerlink" title="光猫"></a>光猫</h1><h2 id="超级管理员密码"><a href="#超级管理员密码" class="headerlink" title="超级管理员密码"></a>超级管理员密码</h2><h3 id="电信"><a href="#电信" class="headerlink" title="电信"></a>电信</h3><p>用户名：useradmin<br>密码：nE7jA%5m</p><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>用户名：CMCCAdmin<br>密码：aDm8H%MdA</p><h2 id="桥接和路由模式切换"><a href="#桥接和路由模式切换" class="headerlink" title="桥接和路由模式切换"></a>桥接和路由模式切换</h2><p>桥接模式：不进行NAT转换，等同于交换器，让外接路由器拨号，效率更高</p><p>路由模式：由光猫拨号进行一次NAT转换，再由路由器DHCP上网，再进行一次NAT转换，效率低，但可将光猫自带的AP功能用上</p><p>但其实可以既用上光猫的AP功能，又使用桥接模式，只需要新建一个网络连接，将光猫自带的AP功能单独分到一个网络上面进行PPPoE拨号，再将其他的LAN口分到另一个网络进行桥接即可，就相当于有两个ip了，如果是申请的公网IP，就赚大了，但要知道怎么设置，或者是光猫默认设置里面就是这么分的，自己乱设置的往往没法上网</p><p>连接光猫WIFI或LAN口，登录光猫后台，输入超级管理员密码，有的光猫默认将自带的AP功能分在一个网络下面，此时只需要将这个设备所在的网络设置为路由模式便可以白嫖一个地址，如果是给的公网地址的话，就相当于又多一个公网地址。</p><h2 id="白嫖20-带宽"><a href="#白嫖20-带宽" class="headerlink" title="白嫖20%带宽"></a>白嫖20%带宽</h2><p>由于IPV4协议的原因，理论传输效率一般是94%多一点<br>宽带供应商考虑损耗往往提供的带宽是标称带宽的120%，也就是1000M宽带，往往能给到1200M。<br>但是由于宽带供应商送的光猫拨号和光带你转换性能不行，会有带宽损耗，所以采用桥接模式，让高性能路由器来进行拨号，带宽会有一定的提升<br>若要完全白嫖到那20%带宽，则可以根据光猫的类型使用gpon或者epon的光电转换棒猫棒，让软路由拨号。epon和gpon就像是两种方言，epon往往更贵。</p><h1 id="路由器-1"><a href="#路由器-1" class="headerlink" title="路由器"></a>路由器</h1><h2 id="确定公网ip"><a href="#确定公网ip" class="headerlink" title="确定公网ip"></a>确定公网ip</h2><p>登录路由器后台，查看路由器获取到的ip地址，再使用设备连接到该路由器，然后在bing上搜索my ip或者在百度上面搜索ip查询，看查到的ip和路由器上面的ip是否一样，如果不一样，则不是公网ip，如果一样，则是公网ip。</p><h2 id="公网访问内网（有公网IP）"><a href="#公网访问内网（有公网IP）" class="headerlink" title="公网访问内网（有公网IP）"></a>公网访问内网（有公网IP）</h2><h3 id="第一步：设置光猫"><a href="#第一步：设置光猫" class="headerlink" title="第一步：设置光猫"></a>第一步：设置光猫</h3><p>方式1：设置光猫为桥接模式<br>方式2：若使用路由模式，则将使用的路由器设置DMZ或者端口转发。</p><h3 id="第二步：设置路由器"><a href="#第二步：设置路由器" class="headerlink" title="第二步：设置路由器"></a>第二步：设置路由器</h3><p>方式1：设置端口转发<br>    针对多个不同设备，但公网对80端口和443端口有限制，需要备案，可以转发成别的端口，如8080，或者4433，访问的时候，需要在域名后面缀上端口访问<br>方式2：设置DMZ<br>    针对单个设备，可以将设备的所有端口全部放在外网，但是风险较大，建议设置防火墙</p><h3 id="第三步：设置动态域名解析DDNS"><a href="#第三步：设置动态域名解析DDNS" class="headerlink" title="第三步：设置动态域名解析DDNS"></a>第三步：设置动态域名解析DDNS</h3><p>由于家庭宽带给的公网IP地址都是动态的，一般每48小时变化一次，因此需要进行动态域名解析，以后只需要记住域名就可以访问了<br>若是企业专线网络的固定公网IP地址，则不需要这一步，直接记住IP访问就行了</p><p>在路由器后台，要看不同的路由器支持哪家的，不同路由器支持的不一样，如果是软路由或者OP系统，往往可以自己设置，但往往对花生壳的动态域名解析支持的都比较好，电信光猫里面的DDNS就是采用的花生壳的动态域名解析</p><h3 id="第四步：开放端口"><a href="#第四步：开放端口" class="headerlink" title="第四步：开放端口"></a>第四步：开放端口</h3><p>window系统可以在防火墙，防火墙高级设置，入站规则里面设置，新建规则，设置开放端口即可</p><h2 id="公网访问内网（无公网IP）"><a href="#公网访问内网（无公网IP）" class="headerlink" title="公网访问内网（无公网IP）"></a>公网访问内网（无公网IP）</h2><h3 id="无获取到公网IP的服务器"><a href="#无获取到公网IP的服务器" class="headerlink" title="无获取到公网IP的服务器"></a>无获取到公网IP的服务器</h3><p>方式1：第三方内网穿透服务：花生壳等<br>方式2：虚拟组网：ZeroTier等</p><h3 id="有获取到公网IP的服务器"><a href="#有获取到公网IP的服务器" class="headerlink" title="有获取到公网IP的服务器"></a>有获取到公网IP的服务器</h3><p>方式1：架设转发服务：Frp等<br>方式2：点对点透传</p><h2 id="设置移动IPV6公网IP"><a href="#设置移动IPV6公网IP" class="headerlink" title="设置移动IPV6公网IP"></a>设置移动IPV6公网IP</h2><h3 id="第一步：设置光猫（需支持IPV6）"><a href="#第一步：设置光猫（需支持IPV6）" class="headerlink" title="第一步：设置光猫（需支持IPV6）"></a>第一步：设置光猫（需支持IPV6）</h3><p>登录光猫后台，设置网络为IPV4&amp;IPV6，关闭IPV6防火墙，便于外网访问内网</p><h3 id="第二步：设置路由器（需支持IPV6）"><a href="#第二步：设置路由器（需支持IPV6）" class="headerlink" title="第二步：设置路由器（需支持IPV6）"></a>第二步：设置路由器（需支持IPV6）</h3><p>登录路由器后台，在基本设置里面开启IPV6即可。</p><h3 id="第三步：验证"><a href="#第三步：验证" class="headerlink" title="第三步：验证"></a>第三步：验证</h3><p>1.电脑或手机连接路由器，设置DMZ。<br>2.打开浏览器输入test—ipv6.com即可</p><h3 id="小米路由器开启外网ssh"><a href="#小米路由器开启外网ssh" class="headerlink" title="小米路由器开启外网ssh"></a>小米路由器开启外网ssh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /       //回到根目录</span><br><span class="line">vi /etc/config/firewall       //编辑防火墙配置</span><br><span class="line"></span><br><span class="line">添加以下代码</span><br><span class="line">config redirect &#x27;Myssh&#x27;                                   </span><br><span class="line">        option src &#x27;wan&#x27;                                  </span><br><span class="line">        option src_dport &#x27;2345&#x27;                          </span><br><span class="line">        option dest &#x27;lan&#x27;                                 </span><br><span class="line">        option dest_port &#x27;22&#x27;                             </span><br><span class="line">        option proto &#x27;tcp&#x27;</span><br></pre></td></tr></table></figure><h1 id="网络运营商"><a href="#网络运营商" class="headerlink" title="网络运营商"></a>网络运营商</h1><p>电信：提供IPV4公网IP，需要申请<br>移动：不提供IPV4公网IP，但提供IPV6公网地址，不需要申请，只需要手动配置一下就行，参照前面的教程</p><h1 id="光猫开启IPV6"><a href="#光猫开启IPV6" class="headerlink" title="光猫开启IPV6"></a>光猫开启IPV6</h1><h2 id="桥接端："><a href="#桥接端：" class="headerlink" title="桥接端："></a>桥接端：</h2><p>只需要在网络，网络设置，网络连接，IP模式选择IPV4&amp;IPV6即可</p><h2 id="路由端："><a href="#路由端：" class="headerlink" title="路由端："></a>路由端：</h2><h3 id="获取前缀："><a href="#获取前缀：" class="headerlink" title="获取前缀："></a>获取前缀：</h3><p>1.网络，网络设置，网络连接，获取前缀勾选；<br>2.网络，网络设置，网络连接，前缀获取方式选择DHCPV6-PD;<br>3.网络，用户侧管理，IPV6设置，前缀来源选择WAN侧代理即可；</p><h3 id="获取DNS（可手动配置）"><a href="#获取DNS（可手动配置）" class="headerlink" title="获取DNS（可手动配置）:"></a>获取DNS（可手动配置）:</h3><p>1.网络，网络设置，网络连接，DNS获取方式选择自动配置;<br>2.网络，用户侧管理，IPV6设置，DNS来源选择网络连接；<br>3.网络，用户侧管理，IPV6设置，接口选择路由的那个网络即可；</p><h3 id="获取IPV6："><a href="#获取IPV6：" class="headerlink" title="获取IPV6："></a>获取IPV6：</h3><p>1.网络，网络设置，网络连接，IP模式选择IPV4&amp;IPV6；<br>2.网络，网络设置，网络连接，地址获取方式选择自动配置</p><p>注意：<br>fe开头通常为内网<br>240开头通常为外网</p><p>其他：DHCPv6能通过DHCPv6获得DNS,域名,但网关信息他不会给你获得,只能通过NDP(无状态地址解析)获得网关信息，要手动设置一下ipv6网关才行，实际上它是通的 只是被代理了 DP模式就正常 SLAAC模式就这样，DNS选择手动 地址分配模式选SLAAC 关闭DHCPv6分配，选DP模式</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web/">Web</category>
      
      
      <category domain="http://example.com/tags/Web/">Web</category>
      
      
      <comments>http://example.com/2023/01/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Android</title>
      <link>http://example.com/2022/12/18/Android/</link>
      <guid>http://example.com/2022/12/18/Android/</guid>
      <pubDate>Sun, 18 Dec 2022 12:06:28 GMT</pubDate>
      
      <description>&lt;p&gt;一些安卓开发教程，不断更新ing&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>一些安卓开发教程，不断更新ing<br><span id="more"></span></p><h1 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h1><h1 id="adb调试"><a href="#adb调试" class="headerlink" title="adb调试"></a>adb调试</h1><h2 id="有线调试"><a href="#有线调试" class="headerlink" title="有线调试"></a>有线调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb device #查看adb设备</span><br><span class="line">adb shell #连接adb设备</span><br><span class="line">adb root #以管理员身份连接adb设备</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="无线调试"><a href="#无线调试" class="headerlink" title="无线调试"></a>无线调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555 #给设备指定端口，其他端口也可以</span><br><span class="line">adb connect 192.168.31.196:5555 #连接设备</span><br><span class="line">adb devices #查看设备是否连接</span><br><span class="line">adb shell #连接设备</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="设置开机启动无线调试"><a href="#设置开机启动无线调试" class="headerlink" title="设置开机启动无线调试"></a>设置开机启动无线调试</h2><pre><code>在手机的/system/build.prop中增加一行配置:service.adb.tcp.port=5555（同样可以指定为其他值）即可，因此可以先将/system/build.prop从手机中pull出来，修改后再push进去</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb pull /system/build.prop #将build.prop文件拉出</span><br><span class="line">nano build.prop #编辑build.prop文件，添加上述代码</span><br><span class="line">adb remount</span><br><span class="line">adb push build.prop /system/ #将build.prop文件放回</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他常见命令"><a href="#其他常见命令" class="headerlink" title="其他常见命令"></a>其他常见命令</h2><h3 id="adb-基础指令"><a href="#adb-基础指令" class="headerlink" title="adb 基础指令"></a>adb 基础指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//启动 adb 服务</span><br><span class="line">adb start-server</span><br><span class="line"></span><br><span class="line">//关闭 adb 服务</span><br><span class="line">adb kill-server</span><br><span class="line"></span><br><span class="line">//获取 adb 帮助信息</span><br><span class="line">adb help</span><br><span class="line"></span><br><span class="line">//获取 adb 当前版本</span><br><span class="line">adb version</span><br><span class="line"></span><br><span class="line">//重启设备</span><br><span class="line">adb reboot</span><br><span class="line"></span><br><span class="line">//获取设备 IP</span><br><span class="line">adb shell ifconfig</span><br><span class="line">  </span><br><span class="line">//断开设备</span><br><span class="line">adb disconnect</span><br></pre></td></tr></table></figure><h3 id="adb-设置权限"><a href="#adb-设置权限" class="headerlink" title="adb 设置权限"></a>adb 设置权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//root 权限</span><br><span class="line">adb root</span><br><span class="line"></span><br><span class="line">//将 &#x27;/system&#x27; 部分置于可写入模式，需先 root，比如 push 前先执行 remount</span><br><span class="line">adb remount</span><br><span class="line"></span><br><span class="line">//remount 等同</span><br><span class="line">adb shell mount -o rw,remount,rw /system</span><br></pre></td></tr></table></figure><h3 id="adb-安装卸载"><a href="#adb-安装卸载" class="headerlink" title="adb 安装卸载"></a>adb 安装卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//安装应用</span><br><span class="line">adb install launch.apk</span><br><span class="line"></span><br><span class="line">//安装带参，参数参考 adb help 注释</span><br><span class="line">adb install -r -t launch.apk</span><br><span class="line"></span><br><span class="line">//卸载应用</span><br><span class="line">adb uninstall com.google.launch</span><br></pre></td></tr></table></figure><h3 id="adb-上传下载"><a href="#adb-上传下载" class="headerlink" title="adb 上传下载"></a>adb 上传下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//上传(push local remote)</span><br><span class="line">adb push /Users/launch.apk /system/app</span><br><span class="line"></span><br><span class="line">//下载(pull remote local)</span><br><span class="line">adb pull /system/app/launch.apk /Users/Roy/Desktop/</span><br></pre></td></tr></table></figure><h3 id="adb-截图录屏"><a href="#adb-截图录屏" class="headerlink" title="adb 截图录屏"></a>adb 截图录屏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//生成截图（screencap path)</span><br><span class="line">adb shell screencap /sdcard/screen.png</span><br><span class="line"></span><br><span class="line">//生成视频(screenrecord path)</span><br><span class="line">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure><h3 id="adb-应用信息"><a href="#adb-应用信息" class="headerlink" title="adb 应用信息"></a>adb 应用信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//获取所有应用信息</span><br><span class="line">adb shell pm list package</span><br><span class="line"></span><br><span class="line">//获取应用安装包路径</span><br><span class="line">adb shell pm path com.android.bluetooth</span><br></pre></td></tr></table></figure><h3 id="adb-版本信息"><a href="#adb-版本信息" class="headerlink" title="adb 版本信息"></a>adb 版本信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//获取应用 versionName</span><br><span class="line">adb shell dumpsys package com.xxx.xxx | grep versionName</span><br><span class="line"></span><br><span class="line">//获取应用 versionCode</span><br><span class="line">adb shell dumpsys package com.xxx.xxx | grep versionCode</span><br></pre></td></tr></table></figure><h3 id="adb-进程信息"><a href="#adb-进程信息" class="headerlink" title="adb 进程信息"></a>adb 进程信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//获取应用进程号</span><br><span class="line">adb shell ps | grep com.android.bluetooth</span><br><span class="line"></span><br><span class="line">//根据进程号杀掉应用进程</span><br><span class="line">adb shell kill -9 processid</span><br></pre></td></tr></table></figure><h3 id="adb-属性信息"><a href="#adb-属性信息" class="headerlink" title="adb 属性信息"></a>adb 属性信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//获取所有属性</span><br><span class="line">adb shell getprop</span><br><span class="line"></span><br><span class="line">//过滤特定属性</span><br><span class="line">adb shell getprop | grep vin</span><br><span class="line"></span><br><span class="line">//设置属性值</span><br><span class="line">adb shell setprop persisi.sys.vin 123456</span><br></pre></td></tr></table></figure><h3 id="adb-焦点输入"><a href="#adb-焦点输入" class="headerlink" title="adb 焦点输入"></a>adb 焦点输入</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//焦点在输入框，可直接将文本填充到输入框</span><br><span class="line">adb shell input text 123456</span><br></pre></td></tr></table></figure><h3 id="adb-启动页面"><a href="#adb-启动页面" class="headerlink" title="adb 启动页面"></a>adb 启动页面</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//启动设置页面</span><br><span class="line">adb shell am start com.android.settings/com.android.settings.Settings</span><br><span class="line"></span><br><span class="line">//启动设置页面，并计算启动时间</span><br><span class="line">adb shell am start -W -n com.android.settings/com.android.settings.Settings</span><br></pre></td></tr></table></figure><h3 id="adb-修改屏幕分辨率密度"><a href="#adb-修改屏幕分辨率密度" class="headerlink" title="adb 修改屏幕分辨率密度"></a>adb 修改屏幕分辨率密度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//获取分辨率</span><br><span class="line">adb shell wm size </span><br><span class="line"></span><br><span class="line">//修改分辨率</span><br><span class="line">adb shell wm size 1920x600</span><br><span class="line"></span><br><span class="line">//重置分辨率</span><br><span class="line">adb shell wm size reset</span><br><span class="line"></span><br><span class="line">//获取屏幕密度</span><br><span class="line">adb shell wm density</span><br><span class="line"></span><br><span class="line">//修改屏幕密度</span><br><span class="line">adb shell wm density 240</span><br><span class="line"></span><br><span class="line">//重置屏幕密度</span><br><span class="line">adb shell wm density</span><br></pre></td></tr></table></figure><h3 id="adb-获取日志"><a href="#adb-获取日志" class="headerlink" title="adb 获取日志"></a>adb 获取日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//打印默认日志</span><br><span class="line">adb logcat</span><br><span class="line"></span><br><span class="line">//打印时间和默认日志</span><br><span class="line">adb logcat -v time</span><br><span class="line"></span><br><span class="line">//打印Error级别的信息</span><br><span class="line">adb logcat *:E</span><br><span class="line"></span><br><span class="line">//打印时间和Error级别的信息</span><br><span class="line">adb logcat -v time *E</span><br><span class="line"></span><br><span class="line">//日志保存到指定位置</span><br><span class="line">adb logcat -v time &gt; ~/Deskop/log.</span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="执行-adb-remount-出错：“-remount-of-the-superblock-failed-Permission-denied”"><a href="#执行-adb-remount-出错：“-remount-of-the-superblock-failed-Permission-denied”" class="headerlink" title="执行 adb remount 出错：“ remount of the / superblock failed: Permission denied”"></a>执行 adb remount 出错：“ remount of the / superblock failed: Permission denied”</h2><p>先执行如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb disable-verity</span><br></pre></td></tr></table></figure><p>再重启设备</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Android/">Android</category>
      
      
      <category domain="http://example.com/tags/Android/">Android</category>
      
      
      <comments>http://example.com/2022/12/18/Android/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LINUX_Command</title>
      <link>http://example.com/2022/12/13/LINUX_Command/</link>
      <guid>http://example.com/2022/12/13/LINUX_Command/</guid>
      <pubDate>Tue, 13 Dec 2022 10:27:57 GMT</pubDate>
      
      <description>&lt;p&gt;关于Linux的指令&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于Linux的指令</p><span id="more"></span><h1 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h1><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="一、查看环境变量"><a href="#一、查看环境变量" class="headerlink" title="一、查看环境变量"></a>一、查看环境变量</h3><p>env</p><h3 id="二、查看PATH"><a href="#二、查看PATH" class="headerlink" title="二、查看PATH"></a>二、查看PATH</h3><p>export<br>或者单独查看PATH环境变量<br>echo $PATH</p><h3 id="三、修改PATH"><a href="#三、修改PATH" class="headerlink" title="三、修改PATH"></a>三、修改PATH</h3><p>1.直接用export命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:你的路径</span><br></pre></td></tr></table></figure><p>2.修改profile文件(对系统里所有用户都有效)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/profile</span><br><span class="line">export PATH=&quot;$PATH:你的路径&quot;</span><br></pre></td></tr></table></figure><p>3.修改.bashrc文件(只对该用户有用)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano /root/.bashrc</span><br><span class="line">export PATH=&quot;$PATH:你的路径&quot;</span><br></pre></td></tr></table></figure><h1 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h1><h2 id="硬件层"><a href="#硬件层" class="headerlink" title="硬件层"></a>硬件层</h2><h3 id="有线通信"><a href="#有线通信" class="headerlink" title="有线通信"></a>有线通信</h3><ul><li>MBus</li><li>USB</li><li>RS485</li><li>RS232</li><li>SPI</li><li>CAN</li><li>UART</li><li>IIC</li><li>IIS</li><li>Ethernet</li></ul><h3 id="近距离"><a href="#近距离" class="headerlink" title="近距离"></a>近距离</h3><ul><li>RFID</li><li>Bluetooth</li><li>NFC</li><li>Dash7</li><li>IRdA</li><li>UWB</li></ul><h3 id="远距离非蜂窝通信"><a href="#远距离非蜂窝通信" class="headerlink" title="远距离非蜂窝通信"></a>远距离非蜂窝通信</h3><ul><li>ZigBee</li><li>WIFI</li><li>wHART</li><li>Z-Wave</li><li>LoRa</li></ul><h3 id="远距离蜂窝通信"><a href="#远距离蜂窝通信" class="headerlink" title="远距离蜂窝通信"></a>远距离蜂窝通信</h3><ul><li>2G</li><li>3G</li><li>4G</li><li>5G</li><li>NB-IOT</li></ul><h2 id="网络传输层"><a href="#网络传输层" class="headerlink" title="网络传输层"></a>网络传输层</h2><ul><li>IP4V</li><li>IP6V</li><li>TCP</li><li>UDP</li><li>6LoWPAN</li><li>RPL</li></ul><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><ul><li>MQTT</li><li>CoAP</li><li>DDS</li><li>XMPP</li><li>AMQP</li><li>HTTP(Port80)</li><li>HTTPS(Port443)</li><li>FTP(Port21控制，Port20数据)表示为TCP端口</li><li>SSH(Port22)</li><li>VNC(Port5901)</li><li>TFTP(Port69)表示为UDP端口</li><li>RDP(Port3389)</li><li>DHCP(Port68)</li><li>Telnet(Port23)</li><li>DNS(Port53)</li><li>Samba(Port445)</li><li>SSL(Port1001、1011)</li></ul><h1 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h1><h2 id="常见桌面"><a href="#常见桌面" class="headerlink" title="常见桌面"></a>常见桌面</h2><h3 id="低资源桌面"><a href="#低资源桌面" class="headerlink" title="低资源桌面"></a>低资源桌面</h3><ul><li>LxQt :(LXDE,GTK2),QT5,C++/QML</li></ul><h3 id="中资源桌面"><a href="#中资源桌面" class="headerlink" title="中资源桌面"></a>中资源桌面</h3><ul><li>Budgie :GTK3,4</li><li>MATE :GTK3,4</li><li>XFCE :GTK3,4</li><li>CINNAMON :GTK3,4</li></ul><h3 id="高资源桌面"><a href="#高资源桌面" class="headerlink" title="高资源桌面"></a>高资源桌面</h3><ul><li>KDE :GTK3,4,C,wayland</li><li>GNOME :QT5,C++/QML,wayland</li></ul><h2 id="传输协议-1"><a href="#传输协议-1" class="headerlink" title="传输协议"></a>传输协议</h2><h3 id="RDP远程桌面协议（TCP3389）"><a href="#RDP远程桌面协议（TCP3389）" class="headerlink" title="RDP远程桌面协议（TCP3389）"></a>RDP远程桌面协议（TCP3389）</h3><p>RDP（Remote Desktop Protocal）远程桌面协议，是一个多通道协议，用于终端服务器与终端服务器客户端之间的通信，让用户（即客户端）连上提供微软终端机服务的电脑。服务端听取送到TCP3389端口的数据，RDP被封装并在TCP加密。<br>RDP协议栈分为五个层次，自上向下分别为应用层、安全层、MCS层、ISO层和TCP/IP层。<br>基于RDP的应用一般包括三个部分：<br><em>终端服务器</em>用户界面传输协议<br>*客户端</p><h3 id="SSH远程桌面协议-（TCP22）"><a href="#SSH远程桌面协议-（TCP22）" class="headerlink" title="SSH远程桌面协议 （TCP22）"></a>SSH远程桌面协议 （TCP22）</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>SSH（Secure Shell）是一种在不安全网络上用于安全远程登录和其他安全网络服务的协议。SSH 为建立在应用层基础上的安全协议，专为远程登录会话和其他网络服务提供安全性的协议。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><ul><li>第一种级别（基于口令的安全验证）</li></ul><p>只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的服务器。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。</p><ul><li>第二种级别（基于密匙的安全验证）</li></ul><p>需要依靠密匙，也就是你必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的密匙进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用密匙，然后把它和你发送过来的公用密匙进行比较。如果两个密匙一致，服务器就用公用密匙加密“质询”（challenge）并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私人密匙解密再把它发送给服务器。</p><ul><li>区别</li></ul><p>1.第二种级别不需要在网络上传送口令，但你必须知道自己密匙的口令</p><p>2.第二种级别不仅加密所有传送的数据，而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。但是整个登录的过程可能需要10秒</p><h3 id="VNC远程桌面协议（TCP5901）"><a href="#VNC远程桌面协议（TCP5901）" class="headerlink" title="VNC远程桌面协议（TCP5901）"></a>VNC远程桌面协议（TCP5901）</h3><p>VNC是虚拟网络控制台(Virtual Network Console)的缩写，是在基于类UNIX操作系统的免费的开源软件，远程控制管理功能强大，但是由于VNC协议自身的限制，无法提供文件上传下载的能力，因此用户在行云管家中使用VNC相关协议访问服务器时，同样也无法进行文件传输。建议有相关需求的用户，尽量使用RDP或者SSH协议访问服务器。</p><h3 id="PCoIP远程桌面协议（VMware）"><a href="#PCoIP远程桌面协议（VMware）" class="headerlink" title="PCoIP远程桌面协议（VMware）"></a>PCoIP远程桌面协议（VMware）</h3><h3 id="SPICE远程桌面协议（redhat）"><a href="#SPICE远程桌面协议（redhat）" class="headerlink" title="SPICE远程桌面协议（redhat）"></a>SPICE远程桌面协议（redhat）</h3><h3 id="ICA-HDX远程桌面协议（citrix）"><a href="#ICA-HDX远程桌面协议（citrix）" class="headerlink" title="ICA/HDX远程桌面协议（citrix）"></a>ICA/HDX远程桌面协议（citrix）</h3><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="删除文件-rm"><a href="#删除文件-rm" class="headerlink" title="删除文件 rm"></a>删除文件 <code>rm</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">完整命令：rm [options] name</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">1.  -i 删除前逐一询问确认</span><br><span class="line">2.  -f 无需确认，直接删除，即使文件属性是 &#x27;唯读&#x27;</span><br><span class="line">3.  -r 将目录及以下的内容全部删除</span><br><span class="line"></span><br><span class="line">删除当前目录下的所有内容</span><br><span class="line">命令： rm -r *</span><br></pre></td></tr></table></figure><h2 id="复制文件-cp"><a href="#复制文件-cp" class="headerlink" title="复制文件 cp"></a>复制文件 <code>cp</code></h2><ul><li>不管是 <code>cp</code> 还是 <code>scp</code> 、<code>rsync</code> 的上传或下载命令，他们的命令书写都遵循一个规则，就是从哪传到哪，前面是（从哪）源文件，后面是（到哪）目标文件</li><li><em>复制源文件或目录到指定目录</em></li><li><em>语法：cp +参数+源文件或目录+目标目录（可以改名）</em></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-r或-R：递归处理，将指定目录下的子文件和子目录一并处理（复制目录的时候使用）</span><br><span class="line">-f：强行复制文件或目录，不论目标文件或目录是否已存在</span><br><span class="line">-p：保留文件属性（所有者、所属组、文件权限、文件时间·····）</span><br><span class="line">-a：相当于-prd</span><br><span class="line">-i：覆盖既有文件时先询问用户。（默认-i）</span><br><span class="line">-l：对源文件建立硬连接，非复制文件。</span><br><span class="line">-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀。</span><br><span class="line">-b：覆盖已存在的文件目标前将目标文件备份。</span><br><span class="line">-v：详细显示命令执行的操作。</span><br><span class="line">-d:–no-dereference –preserv=links 复制符号连接加的选项</span><br><span class="line">注意：当复制目录的时候一定要加上选项-r，不然不能复制</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line">1. 复制并重命名</span><br><span class="line">cp a.txt b.txt  # 复制a.txt 到本目录下并命名为 b.txt</span><br><span class="line"></span><br><span class="line">2. 复制目录的时候必须加 -r  # 将test目录复制一份成 test2目录，注意：复制目录时，不能复制到他本身下</span><br><span class="line">cp -r test/ test2</span><br></pre></td></tr></table></figure><h2 id="编辑文本文件-vim"><a href="#编辑文本文件-vim" class="headerlink" title="编辑文本文件 vim"></a>编辑文本文件 <code>vim</code></h2><ul><li>打开并编辑文本文件</li><li>共有三种模式：命令模式、输入模式、末行模式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 完整命令： &quot;vim 文件路径&quot;</span><br><span class="line"></span><br><span class="line">2. 简单介绍</span><br><span class="line"></span><br><span class="line">命令模式： 在文件中进行 查找、删除、复制、粘贴 操作</span><br><span class="line">输入模式： 就是正常的编辑文件</span><br><span class="line">末行模式： 对文件的操作进行 保存、退出vim等</span><br><span class="line"></span><br><span class="line">3. 三种模式之间的切换 </span><br><span class="line"></span><br><span class="line">命令模式 --&gt; 输入模式  # i、I、a、A、o、O、Insert 键</span><br><span class="line">输入模式 --&gt; 命令模式  # Esc 键</span><br><span class="line">命令模式 --&gt; 末行模式  # ： 键</span><br><span class="line">末行模式 --&gt; 命令模式  # Esc 键</span><br></pre></td></tr></table></figure><h3 id="（1）命令模式"><a href="#（1）命令模式" class="headerlink" title="（1）命令模式"></a>（1）命令模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">命令模式： # 实际上看不到输入的命令</span><br><span class="line">默认处于命令模式，此模式下可以用方向键或者&quot; h、j、k、l &quot; 移动光标，还可以对文件进行复制、粘贴、替换、删除等操作</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">光标操作：</span></span><br><span class="line">跳转到行首： Home 键、 &quot;^&quot;键、数字&quot;0&quot;</span><br><span class="line">跳转到行尾： End 键、&quot;$&quot;键</span><br><span class="line">跳转到文件的首行： &quot;1G&quot;、&quot;gg&quot;</span><br><span class="line">跳转到文件的尾行： &quot;G&quot;</span><br><span class="line">跳转到文件的第n行： &quot;nG&quot;  # n为数字</span><br><span class="line">行号显示/不显示：   &quot;:set nu&quot;  &quot;:set nonu&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容操作</span></span><br><span class="line"></span><br><span class="line">删除： </span><br><span class="line"> 删除光标处的单个字符： &quot;x、X、Del&quot;键 </span><br><span class="line">    删除当前光标所在行： &quot;dd&quot;</span><br><span class="line">    删除从光标处开始的 n 行内容  &quot;ndd&quot;  # n为数字</span><br><span class="line">    删除从行首到光标的所有内容 &quot;d^&quot;</span><br><span class="line">    删除从行尾到光标的所有内容 &quot;d$&quot;</span><br><span class="line">复制：</span><br><span class="line"> 复制光标所在行的整行 &quot;yy&quot;</span><br><span class="line">    复制从光标往上的 n 行内容 &quot;nyy&quot;  # n为数字</span><br><span class="line">  </span><br><span class="line">粘贴：</span><br><span class="line"> 粘贴到光标之后 &quot;p&quot;  # 小写</span><br><span class="line">    粘贴到光标之前 &quot;P&quot;  # 大写</span><br><span class="line">  </span><br><span class="line">查找： # 能看到命令</span><br><span class="line"> 查找字符串  &quot;/word&quot;  # 从上而下查找&quot;word&quot;字符串</span><br><span class="line">    查找字符串  &quot;/word&quot;  # 从下而上查找&quot;word&quot;字符串</span><br></pre></td></tr></table></figure><h3 id="（2）末行模式"><a href="#（2）末行模式" class="headerlink" title="（2）末行模式"></a>（2）末行模式</h3><ul><li>主要是用来对文件进行保存、退出vim编辑器 等操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 保存文件</span><br><span class="line">:w</span><br><span class="line">:w 文件路径  # 另存为其他文件，如 :w /root/new_file/test.txt ，另存为/root/new_file目录下的test.txt</span><br><span class="line"></span><br><span class="line">2. 退出vim</span><br><span class="line">:q  # 未修改任何内容的情况下，退出vim</span><br><span class="line">:q!  # 放弃修改，退出vim</span><br><span class="line"></span><br><span class="line">3. 保存文件并退出vim</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><h2 id="查看文件-cat"><a href="#查看文件-cat" class="headerlink" title="查看文件 cat"></a>查看文件 <code>cat</code></h2><ul><li><a href="https://wenku.baidu.com/view/2a36e038b4360b4c2e3f5727a5e9856a561226bb.html">查看详情</a></li><li><p><code>cat 命令</code> 两种用法</p><ul><li>显示文件内容，打印到终端</li><li>也可以把几个文件内容附加到另一个文件中，即连接合并文件</li></ul></li><li><p>基本使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">1. 查看文件内容（会把内容全部打印到终端）</span><br><span class="line">cat [选项] 文件路径  # 不论文件内容有多少，都会一次性显示。如果文件非常大，那么文件开头的内容就看不到了不过 Linux 可以使用 PgUp+上箭头 组合键向上翻页，但是这种翻页是有极限的，如果文件足够长，那么还是无法看全文件的内容</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">-A 相当于 -vET 选项的整合，用于列出所有隐藏符号；</span><br><span class="line">-E 列出每行结尾的回车符 $；</span><br><span class="line">-n 对输出的所有行进行编号；</span><br><span class="line">-b 同 -n 不同，此选项表示只对非空行进行编号。</span><br><span class="line">-T 把 Tab 键 ^I 显示出来；</span><br><span class="line">-V 列出特殊字符；</span><br><span class="line">-s 当遇到有连续 2 行以上的空白行时，就替换为 1 行的空白行。</span><br><span class="line"></span><br><span class="line">2. 查找文件中的内容</span><br><span class="line">cat a.txt |grep **  # ** 即是要查找的内容</span><br><span class="line"></span><br><span class="line">3. 利用cat 创建文件</span><br><span class="line">若原来没有文件:</span><br><span class="line">cat &gt; b.txt &lt;&lt;EOF  </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">你要输入的内容...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">EOF</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面三行的意思是创建并打开一个 b.txt文件，并且以EOF为结束编辑并保存的结束语（也可以用自定义的结束语），中间输入自己要编辑的内容，最后输入EOF保存退出。</span></span><br><span class="line"></span><br><span class="line">4. 利用cat清空文件内容（实际就是利用cat的编辑模式，进行覆盖写，和python中的 w 模式相同）</span><br><span class="line">cat &gt;c.txt&lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">EOF</span></span><br><span class="line"></span><br><span class="line">5. 像文件的尾部写入内容（追加写）</span><br><span class="line">命令与上面的覆盖写类似，只是把 &gt; 换成 &gt;&gt; 即可</span><br><span class="line">cat &gt;&gt; b.txt &lt;&lt;EOF  </span><br><span class="line"></span><br><span class="line">6. cat 可以实现调用变量，对关键字$的转义</span><br><span class="line">如 不转义$</span><br><span class="line">cat &gt;test.txt &lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">DATE=$(<span class="built_in">date</span> + %Y%m%d)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">mkdir</span> /root/<span class="variable">$DATE</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">EOF</span></span><br><span class="line">cat test.txt</span><br><span class="line">结果为：</span><br><span class="line">DATE=20220620</span><br><span class="line">mkdir /root/</span><br><span class="line"></span><br><span class="line">转义 $</span><br><span class="line">cat &gt;test.txt &lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">DATE=$(<span class="built_in">date</span> + %Y%m%d)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">mkdir</span> /root/\<span class="variable">$DATE</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">EOF</span></span><br><span class="line">cat test.txt</span><br><span class="line">结果为：</span><br><span class="line">DATE=20220620</span><br><span class="line">mkdir /root/$DATE</span><br><span class="line"></span><br><span class="line">7. 合并文件的内容到一个新的文件中</span><br><span class="line">[root@localhost base]# ls</span><br><span class="line"></span><br><span class="line">file1.txt    file2.txt</span><br><span class="line"></span><br><span class="line">[root@localhost base]# cat file1.txt</span><br><span class="line"></span><br><span class="line">http://c.biancheng.net(file1.txt)</span><br><span class="line"></span><br><span class="line">[root@localhost base]# cat file2.txt</span><br><span class="line"></span><br><span class="line">is great(file2.txt)</span><br><span class="line"></span><br><span class="line">[root@localhost base]# cat file1.txt file2.txt &gt; file3.txt</span><br><span class="line"></span><br><span class="line">[root@localhost base]# more file3.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">more 命令也可查看文件中的内容</span></span><br><span class="line"></span><br><span class="line">http://c.biancheng.net(file1.txt)</span><br><span class="line"></span><br><span class="line">is great(file2.txt)</span><br><span class="line"></span><br><span class="line">[root@localhost base]# ls</span><br><span class="line"></span><br><span class="line">file1.txt    file2.txt    file3.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="后台执行程序"><a href="#后台执行程序" class="headerlink" title="后台执行程序"></a>后台执行程序</h2><h3 id="（1）后台执行"><a href="#（1）后台执行" class="headerlink" title="（1）后台执行"></a>（1）后台执行</h3><ul><li><code>nohup 命令</code><ul><li>英文全称  <em>no hang up</em> （不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行</li><li>在默认情况下（非重定向时），会输出一个名叫 <code>nohup.out</code> 的文件到当前目录下，如果当前目录的 <code>nohup.out</code>文件不可写，输出重定向到 <code>$HOME/nohup.out</code> 文件中</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1. 完整命令：</span><br><span class="line"></span><br><span class="line">&quot; nohup Command [ Arg … ] [　&amp; ] &quot;</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"> Command：要执行的命令。</span><br><span class="line"></span><br><span class="line"> Arg：一些参数，可以指定输出文件。</span><br><span class="line"></span><br><span class="line"> &amp;：让命令在后台执行，终端退出后命令仍旧执行。</span><br><span class="line"></span><br><span class="line">2. 实例</span><br><span class="line"></span><br><span class="line">nohup python /opt/project/test.py  &amp;  # 以下命令在后台执行 /opt/project 目录下的 test.py 脚本，在终端如果看到以下输出说明运行成功 appending output to nohup.out</span><br><span class="line"></span><br><span class="line">nohup /root/runoob.sh &gt; runoob.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">2&gt;</span><span class="language-bash">&amp;1 解释：</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">将标准错误 2 重定向到标准输出 &amp;1 ，标准输出 &amp;1 再被重定向输入到 runoob.log 文件中</span></span><br><span class="line">    0 – stdin (standard input，标准输入)</span><br><span class="line"> 1 – stdout (standard output，标准输出)</span><br><span class="line"> 2 – stderr (standard error，标准错误输出)</span><br><span class="line">  </span><br><span class="line">3. 结束后台运行的程序</span><br><span class="line"> - 可以用杀死进程的方法实现</span><br><span class="line">    - 可以查看当前终端后台执行的任务，然后用 kill jobnum 命令来删除任务（这种不太推荐，终端断开或关闭之后，就差看不到之前的任务了）</span><br><span class="line"></span><br><span class="line">ps -aux | grep &quot;test.py&quot; </span><br><span class="line">ps -aux | grep &quot;runoob.sh&quot; </span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">    a : 显示所有程序</span><br><span class="line">    u : 以用户为主的格式来显示</span><br><span class="line">    x : 显示所有程序，不区分终端机</span><br><span class="line"></span><br><span class="line">找到进程号PID之后，可以用 kill PID 命令来删除</span><br><span class="line">kill -9 进程号PID</span><br></pre></td></tr></table></figure><h3 id="（2）前、后台任务切换"><a href="#（2）前、后台任务切换" class="headerlink" title="（2）前、后台任务切换"></a>（2）前、后台任务切换</h3><ul><li><p>将后台执行的程序调到前台继续执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">命令： fg</span><br><span class="line">将后台中的命令调至前台继续运行</span><br><span class="line"></span><br><span class="line">如果后台中有多个命令，可以先用jobs -l查看jobnun，然后用 fg jobnum 将选中的命令调出</span><br><span class="line"></span><br><span class="line">命令： Ctrl + z</span><br><span class="line">将一个正在前台执行的命令放到后台，并且处于暂停状态</span><br><span class="line"></span><br><span class="line">命令： bg</span><br><span class="line">将一个在后台暂停的命令，变成在后台继续执行</span><br><span class="line"></span><br><span class="line">如果后台中有多个命令，可以先用jobs查看jobnum，然后用 bg jobnum 将选中的命令调出继续执行</span><br></pre></td></tr></table></figure></li></ul><h3 id="（3）nohup-out-维护"><a href="#（3）nohup-out-维护" class="headerlink" title="（3）nohup.out 维护"></a>（3）<code>nohup.out</code> 维护</h3><ul><li><p><code>nohup.out</code>会一直增加内容，因此就有了不停止服务直接，清空 <code>nohup.out</code>文件的方法。<br>两个可以不用停止WEB服务就可以清空 <code>nohup.out</code>的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一种：</span><br><span class="line"><span class="built_in">cp</span>  /dev/null nohup.out</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; nohup.out</span><br></pre></td></tr></table></figure></li></ul><h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><h3 id="（1）显示进程"><a href="#（1）显示进程" class="headerlink" title="（1）显示进程"></a>（1）显示进程</h3><ul><li><a href="https://www.coonote.com/linux-note/linux-ps-cmd-use.html">查看详情</a></li><li><p>显示进程常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef  # 显示所有进程信息</span><br><span class="line"></span><br><span class="line">ps -ef|grep ***  # 查找特定进程， *** 代表进程信息中包含的关键字，如 是什么程序python、java等，运行脚本的文件名等</span><br></pre></td></tr></table></figure></li></ul><h3 id="（2）杀死进程"><a href="#（2）杀死进程" class="headerlink" title="（2）杀死进程"></a>（2）杀死进程</h3><ul><li><a href="http://edu.jb51.net/linux/linux-comm-kill.html">查看详情</a></li><li><p>杀进程常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kill PID  # 杀死某进程</span><br><span class="line">kill -9 PID  # 彻底杀死某进程</span><br><span class="line"></span><br><span class="line">杀死指定用户的所有进程</span><br><span class="line">kill -9 $(ps -ef | grep hnlinux)  # 方法一 过滤出hnlinux用户进程</span><br><span class="line">kill -u hnlinux  # 方法二</span><br></pre></td></tr></table></figure></li></ul><h2 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">一、打开/关闭某个端口</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态：（active (running) 即是开启状态）</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已开放端口：（8080和3306 即是已开放端口）</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防火墙开放端口：（以3306为例）</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭8080端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --remove-port=8080/tcp</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启防火墙:</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新防火墙规则：</span> </span><br><span class="line">firewall-cmd --reload</span><br><span class="line"> </span><br><span class="line">命令含义：</span><br><span class="line"> </span><br><span class="line">–zone #作用域</span><br><span class="line"> </span><br><span class="line">–add-port=80/tcp #添加端口，格式为：端口/通讯协议</span><br><span class="line"> </span><br><span class="line">–permanent #永久生效，没有此参数重启后失效</span><br><span class="line"> </span><br><span class="line">firewall-cmd --reload 并不中断用户连接，即不丢失状态信息</span><br><span class="line"> </span><br><span class="line">firewalld的基本使用</span><br><span class="line"> </span><br><span class="line">二、常用操作命令</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动：</span> </span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭：</span> </span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看状态：</span> </span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机禁用 ：</span> </span><br><span class="line">systemctl disable firewalld</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启用 ：</span> </span><br><span class="line">systemctl enable firewalld</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个服务：</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭一个服务：</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启一个服务：</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示一个服务的状态：</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在开机时启用一个服务：</span></span><br><span class="line">systemctl enable firewalld.service</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在开机时禁用一个服务：</span></span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务是否开机启动：</span></span><br><span class="line">systemctl is-enabled firewalld.service</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已启动的服务列表：</span></span><br><span class="line">systemctl list-unit-files|grep enabled</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看启动失败的服务列表：</span></span><br><span class="line">systemctl --failed</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置</span></span><br><span class="line">firewalld-cmd</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本：</span> </span><br><span class="line">firewall-cmd --version</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看帮助：</span> </span><br><span class="line">firewall-cmd --help</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示状态：</span> </span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有打开的端口：</span> </span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看区域信息:</span> </span><br><span class="line">firewall-cmd --get-active-zones</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定接口所属区域：</span> </span><br><span class="line">firewall-cmd --get-zone-of-interface=eth0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拒绝所有包：</span></span><br><span class="line">firewall-cmd --panic-on</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消拒绝状态：</span> </span><br><span class="line">firewall-cmd --panic-off</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否拒绝：</span> </span><br><span class="line">firewall-cmd --query-panic</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service    启动防火墙</span><br><span class="line"></span><br><span class="line">systemctl enable firewalld    自启动</span><br><span class="line"></span><br><span class="line">firewalld-cmd    后面跟命令行</span><br><span class="line"></span><br><span class="line">firewalld-cmd --help    查看一下有啥命令呗</span><br><span class="line"></span><br><span class="line">firewall-config     图形化配置，偷懒大法</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=block --add-source=192.168.100.0/24    添加一条规则，凡是来自192.168.100.0/24网段的信息就放到block中</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=block --remove-source=192.168.100.0/24    remove删了这条规则</span><br><span class="line"></span><br><span class="line">这个block 的zone 到这里的都给拒绝了，去别的机器ping就ping不通了</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=drop --add-source=192.168.100.0/24    这个drop比block还厉害，直接把你包给扔了都不告诉你</span><br><span class="line"></span><br><span class="line">一般用drop，别用block</span><br><span class="line"></span><br><span class="line">systemctl restart firewalld.service    重启以后临时规则就没了，永久规则还有</span><br><span class="line"></span><br><span class="line">firewall-cmd --permanent --zone=drop --add-source=192.168.100.0/24    使用--permanent永久规则，必须重启服务后生效</span><br><span class="line"></span><br><span class="line">firewall-cmd --list-all    列出规则，默认public</span><br></pre></td></tr></table></figure><h2 id="用户-su-和-sudo"><a href="#用户-su-和-sudo" class="headerlink" title="用户 su 和 sudo"></a>用户 <code>su 和 sudo</code></h2><h3 id="（1）su介绍"><a href="#（1）su介绍" class="headerlink" title="（1）su介绍"></a>（1）<code>su</code>介绍</h3><ul><li><p><code>su</code>的全称是switch user，用来切换当前用户。<code>su</code>的一般使用方法是 <code>su</code> 或者 <code>su -</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su是切换到root用户的命令，主要用法如下：</span><br><span class="line">su  # 不带参数直接输入su将切换到root用户，需要输入root密码</span><br><span class="line">su -  # 等同于 su -l，切换到root用户并加载root的环境变量（等同于root身份登录），加入了 - 或 -l 参数表示同时切换到该用户的环境</span><br><span class="line">su username  # 切换到其他用户，需要输入该用户的密码</span><br><span class="line">su -c ‘commond’  # 以root用户执行命令，类似于sudo，不同之处是需要输入root密码</span><br><span class="line">su命令主要是用来切换root身份，前提是需要知道root密码</span><br></pre></td></tr></table></figure></li></ul><h3 id="（2）sudo介绍"><a href="#（2）sudo介绍" class="headerlink" title="（2）sudo介绍"></a>（2）<code>sudo</code>介绍</h3><ul><li>全称为super user do，即以超级用户root的身份执行命令</li><li>使用 <code>sudo su -</code>，提供当前用户的密码，可以切换到root用户</li><li>完整命令 <code>sudo &#39;要执行的commond&#39;</code></li></ul><h2 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h2><ul><li><a href="https://www.136.la/nginx/show-64121.html">查看详情</a></li></ul><h3 id="（1）关键字解释"><a href="#（1）关键字解释" class="headerlink" title="（1）关键字解释"></a>（1）关键字解释</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">通过ll查看详细信息时，例如：</span><br><span class="line">-rwxrwxrwx. 1 root root 181 3月 15 15:34 test.txt</span><br><span class="line"></span><br><span class="line">从左往右：（r 为 读，w 为 写，x 为 可执行）</span><br><span class="line"></span><br><span class="line">-  # 表示类型 -表示普通文件 d表示目录</span><br><span class="line">rwx  # 第一组rwx：当前用户权限，某个权限没有就显示 - </span><br><span class="line">rwx  # 第二组rwx：当前用户组权限，某个权限没有就显示 - </span><br><span class="line">rwx  # 第三组rwx：其他用户权限，某个权限没有就显示 - </span><br></pre></td></tr></table></figure><h3 id="（2）chmod-命令修改权限"><a href="#（2）chmod-命令修改权限" class="headerlink" title="（2）chmod 命令修改权限"></a>（2）<code>chmod 命令</code>修改权限</h3><ul><li>完整命令 <code>chmod [options] mode 文件或目录名</code></li><li><p>修改文件权限，共两种命令方式</p><ul><li>使用相加减表达权限，</li><li>使用数字表达权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">权限介绍：4=可读 2=可写 1=可执行</span><br><span class="line">      7 7 7</span><br><span class="line">      第一个7 是 文件所有者的权限</span><br><span class="line">      第二个7 是 文件所属组的权限</span><br><span class="line">      第三个7 是 其他用户的权限</span><br><span class="line">      7 = 4+2+1 表示有可读可写可执行</span><br><span class="line">      6 = 4+2 表示有可读可写权限</span><br><span class="line">      5 = 4+1 表示有可读可执行</span><br><span class="line"></span><br><span class="line">[options]：</span><br><span class="line">    -c  # 若该文件权限确实已经更改，才显示其更改动作</span><br><span class="line">    -f  # 若该文件权限无法被更改也不要显示错误讯息</span><br><span class="line">    -v  # 显示权限变更的详细资料</span><br><span class="line">    -R  # 对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)</span><br><span class="line"></span><br><span class="line">mode ：</span><br><span class="line"> u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。u用户 g组 o其它  a 所有用户(默认)</span><br><span class="line"></span><br><span class="line"> + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</span><br><span class="line"></span><br><span class="line"> r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行</span><br></pre></td></tr></table></figure></li></ul><h3 id="（3）权限修改实例"><a href="#（3）权限修改实例" class="headerlink" title="（3）权限修改实例"></a>（3）权限修改实例</h3><h4 id="i）更改目录所有者（非-chmod-命令）"><a href="#i）更改目录所有者（非-chmod-命令）" class="headerlink" title="i）更改目录所有者（非 chmod 命令）"></a>i）更改目录所有者（非 <code>chmod 命令</code>）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; chown -R 用户名称 目录名称 &quot;  </span><br></pre></td></tr></table></figure><h4 id="ii）更改目录权限"><a href="#ii）更改目录权限" class="headerlink" title="ii）更改目录权限"></a>ii）更改目录权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. chmod u+x file  # 给file的属主增加执行权限</span><br><span class="line">2. chmod 751 file  # 给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</span><br><span class="line">3. chmod u=rwx,g=rx,o=x file  # 同 2 效果一样</span><br><span class="line">4. chmod =r file  # 为所有用户分配读权限</span><br><span class="line">5. chmod 444 file  # 同 4 效果一样</span><br><span class="line">6. chmod a-wx,a+r file  # 同 4、5 效果一样</span><br><span class="line">7. chmod -R u+r directory  # 递归地给directory目录下所有文件和子目录的属主分配读的权限</span><br><span class="line">8. chmod 4755  # 设置用ID，给属主分配读、写和执行权限，给组和其他用户分配读、执行的权限。</span><br></pre></td></tr></table></figure><h2 id="下载-wget"><a href="#下载-wget" class="headerlink" title="下载 wget"></a>下载 <code>wget</code></h2><h3 id="wget介绍"><a href="#wget介绍" class="headerlink" title="wget介绍"></a><code>wget</code>介绍</h3><ul><li><a href="https://blog.csdn.net/qq_43842093/article/details/122030935">查看详情</a></li><li><code>wget</code>命令是Linux系统用于从Web下载文件的命令行工具，支持 HTTP、HTTPS及FTP协议下载文件，而且 <code>wget</code>还提供了很多选项，例如下载多个文件、后台下载，使用代理等等</li><li><p>完整命令 <code>wget [options] [url]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[options]： 常用参数，&#x27;注意大小写&#x27;</span><br><span class="line"> -O  # 以其他名称保存下载的文件</span><br><span class="line"> -P  # 将文件下载到指定目录</span><br><span class="line">    -c  # 断点续传</span><br><span class="line">    -nc  # 不要重复下载已存在的文件</span><br><span class="line">    -b  # 在后台下载</span><br><span class="line">    -i  # 下载多个文件</span><br><span class="line">    -limit-rate  # 限制下载速度</span><br><span class="line">    -U  # 设定模拟下载</span><br><span class="line">    -t  # 增加重试次数</span><br><span class="line">实例：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该命令会下载文件到当前工作目录中，在下载过程中，会显示进度条、文件大小、下载速度等</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.0.8.tar.gz</span><br><span class="line"></span><br><span class="line">wget -O redis.tar.gz https://download.redis.io/releases/redis-6.0.8.tar.gz  </span><br><span class="line"></span><br><span class="line">wget -P /usr/software https://download.redis.io/releases/redis-6.0.8.tar.gz</span><br><span class="line"></span><br><span class="line">wget -c https://download.redis.io/releases/redis-6.0.8.tar.gz   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果先要一次下载多个文件，首先需要创建一个文本文件，并将所有的url添加到该文件中，每个url都必须是单独的一行</span>  </span><br><span class="line">vim download_list.txt</span><br><span class="line">wget -i download_list.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载速度限制为1m/s</span></span><br><span class="line">wget --limit-rate=1m https://download.redis.io/releases/redis-6.0.8.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果远程服务器阻止wget下载资源，我们可以通过-U选项模拟浏览器进行下载，例如下面模拟谷歌浏览器下载</span>  </span><br><span class="line">wget -U &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.43 Safari/537.36&#x27; https://download.redis.io/releases/redis-6.0.8.tar.gz  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置重试次数为40次</span>  </span><br><span class="line">wget --t=40 https://download.redis.io/releases/redis-6.0.8.tar.gz  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过FTP下载如果要从受密码保护的FTP服务器下载文件，需要指定用户名和密码，格式如下</span>  </span><br><span class="line">wget --ftp-user=&lt;username&gt; --ftp-password=&lt;password&gt; url </span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LINUX/">LINUX</category>
      
      
      <category domain="http://example.com/tags/LINUX/">LINUX</category>
      
      
      <comments>http://example.com/2022/12/13/LINUX_Command/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ZYNQ-in-7010</title>
      <link>http://example.com/2022/12/13/ZYNQ-in-7010/</link>
      <guid>http://example.com/2022/12/13/ZYNQ-in-7010/</guid>
      <pubDate>Tue, 13 Dec 2022 10:12:43 GMT</pubDate>
      
      <description>&lt;p&gt;个人关于ZYNQ的一些开发学习文档，以小熊猫的ZYNQ7010和Smart 7020 SP为例，不断更新ing&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>个人关于ZYNQ的一些开发学习文档，以小熊猫的ZYNQ7010和Smart 7020 SP为例，不断更新ing</p><span id="more"></span><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><ol><li>敏感信号表:所有的右边表达式中的变量以及if,case条件中的变量</li><li>if/else要配对以避免latch（锁存器）的产生，同样的case语句加default语句</li><li>状态机（fsm）：<ol><li>使用独热码，每个状态只有一个寄存器置位，译码逻辑简单</li><li>三段式可以在组合逻辑后再增加一级寄存器来实现时序逻辑输出:<br><a href="https://shjdgwj.github.io/d8298fbe5fcd/image-20220116144516055.png"><img src="https://shjdgwj.github.io/d8298fbe5fcd/images/loading.gif" alt="img" title="image-20220116144516055"></a><ul><li>可以有效地滤去组合逻辑输出的毛刺</li><li>可以有效地进行时序计算与约束</li><li>另外对于总线形式的输出信号来说，容易使总线数据对齐,从而减小总线数据间的偏移，减小接收端数据采样出错的频率。</li></ul></li></ol></li></ol><h1 id="Petalinux"><a href="#Petalinux" class="headerlink" title="Petalinux"></a>Petalinux</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>source /tools/petalinux/2023.1/settings.sh</p><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>petalinux-create —type project —template zynq —name Petalinux_TF</p><h3 id="进入图形化配置界面"><a href="#进入图形化配置界面" class="headerlink" title="进入图形化配置界面"></a>进入图形化配置界面</h3><p>petalinux-config —get-hw-description=.</p><h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><p>petalinux-build</p><h3 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h3><p>petalinux-package —boot —fsbl ./images/linux/zynq_fsbl.elf —u-boot —fpga —kernel —force</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="启动出错显示找不到环境等问题"><a href="#启动出错显示找不到环境等问题" class="headerlink" title="启动出错显示找不到环境等问题"></a>启动出错显示找不到环境等问题</h3><p>在uboot界面输入：<br>env default -a<br>saveenv<br>boot</p><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>自从Petalinux 2022.1版本以后，取消了root登录。用户名改为petalinux，然后会引导你设置新密码。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://shjdgwj.github.io/d8298fbe5fcd/">ZYNQ学习笔记</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/ZYNQ/">ZYNQ</category>
      
      
      <category domain="http://example.com/tags/7010/">7010</category>
      
      
      <comments>http://example.com/2022/12/13/ZYNQ-in-7010/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>STM32</title>
      <link>http://example.com/2022/12/10/STM32/</link>
      <guid>http://example.com/2022/12/10/STM32/</guid>
      <pubDate>Sat, 10 Dec 2022 14:18:36 GMT</pubDate>
      
      <description>&lt;p&gt;STM32的个人开发文档，不断更新ing&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>STM32的个人开发文档，不断更新ing<br><span id="more"></span></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>vscode 插件 Keil Assistant</li><li><p>keil启动vscode</p><ul><li>编码改为UTF-8，Tab-size为4</li><li>在Edit-&gt;Configuration-&gt;Editor-&gt;File&amp;Project Handing里勾上了Automatic reload of externally modified files</li><li>点击mdk菜单栏Tools-&gt;Customize Tools Menu，在弹出的对话框中新建一个外部编辑器，并指定其路径， <strong>注意Arguments要填上#E</strong> ，我的vscode路径：D:\Program Files\Microsoft VS CodeCode.exe</li><li>点击确定后，点击mdk菜单栏Tools-&gt;VSCode，即可自动调用vscode打开当前文件</li></ul></li><li><a href="https://blog.csdn.net/asdfghjkl1234567890p/article/details/125522052">Keil仿真监控数据导出到EXCEL图表显示的方法</a></li><li><a href="https://blog.csdn.net/QXF0806/article/details/125687203">Keil5把变量的数据导出，可视化</a>经验</li></ul><ol><li>switch -case语句中 case: 后面不能直接定义变量，但是可以先写一个；来解决这个问题</li><li><a href="https://zhuanlan.zhihu.com/p/111723881">Nucleo-G474RE作为烧写器</a></li><li><a href="http://t.zoukankan.com/juwan-p-13069102.html">理解 LCD 屏幕的驱动原理与调试过程，示例的驱动 IC 为 GC9308 ，展示整个屏幕的驱动过程。</a></li></ol><h1 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h1><h2 id="SysTick定时时间计算"><a href="#SysTick定时时间计算" class="headerlink" title="SysTick定时时间计算"></a>SysTick定时时间计算</h2><p>t = reload <em>(1/clk)<br>clk = 72m时 t = (72)</em>(1/72M) = 1us<br>clk = 72m时 t = (72000)* (1/72M) = 1ms<br>1s = 1000ms = 1000 000us = 1000 000 000ns<br>记得使用 <code>HAL_TIM_Base_Start(&amp;htim1);</code></p><h1 id="keil-软件仿真"><a href="#keil-软件仿真" class="headerlink" title="keil 软件仿真"></a>keil 软件仿真</h1><h2 id="stm32f103VET6"><a href="#stm32f103VET6" class="headerlink" title="stm32f103VET6"></a>stm32f103VET6</h2><ol><li>debug页面如下设置<br><a href="https://shjdgwj.github.io/e6640d881469/1.png"><img src="https://shjdgwj.github.io/e6640d881469/images/loading.gif" alt="KEIL_DEBUGKEIL_DEBUG"></a></li><li>打开逻辑分析仪</li><li>setup打开后如下设置<a href="https://shjdgwj.github.io/e6640d881469/2.png"><img src="https://shjdgwj.github.io/e6640d881469/images/loading.gif" alt=""></a><br>填 <code>PORTB.0</code>即可查看GPIOB pin0的输出<br><code>DisPlay Type</code> 选择 <code>Bit</code><br>之后就能输出PWM波形了</li></ol><h2 id="stm32f103C8T6"><a href="#stm32f103C8T6" class="headerlink" title="stm32f103C8T6"></a>stm32f103C8T6</h2><p><a href="https://blog.csdn.net/keygun/article/details/97619613">软件仿真配置</a><br>CPU<br>DLL：SARMCM3.DLL</p><p>Dialog<br>DLL：DARMSTM.DLL Parameter:-pSTM32F103C8</p><p>Driver<br>DLL SARMCM3.DLL</p><p>Dalog<br>DLL:TARMSTM.DLL Parameter:-pSTM32F103C8</p><h1 id="C相关"><a href="#C相关" class="headerlink" title="C相关"></a>C相关</h1><h2 id="STM32使用malloc函数"><a href="#STM32使用malloc函数" class="headerlink" title="STM32使用malloc函数"></a>STM32使用malloc函数</h2><p>对于malloc和free对内存堆栈块的空间操作，在keilMDK中需要满足下面几个条件：</p><ol><li>使用的代码文件中需要包含头文件 <code>#include &lt;stdlib.h&gt;</code></li><li>在工程的属性设置中需要把 Use MicroLIB 选项勾选</li><li>这时候原则上就可以使用空间申请和释放的两个操作函数了，但是由于STM32在startup_stm32f10x_hd.s中分配的堆空间只有0x00000200个字节，所以很多时候调用malloc函数时如果申请空间超过0X200则返回了NULL，这时候就需要到该文件对这个值进行设置。</li></ol><h2 id="单片机中的数据类型"><a href="#单片机中的数据类型" class="headerlink" title="单片机中的数据类型"></a>单片机中的数据类型</h2><p>u8——1个字节，无符号型（不能表达负数，如果用来当作负数的话，就出错了）<br>u16 ——2个字节，无符号型（参看前边STM32f10x.h中的定义）<br>u32——4个字节，无符号型<br>int——4个字节,有符号型，可以表达负整数<br>float ——4个字节，有符号型，可以表达负数/小数<br>double——8个字节，有符号弄，可以表达负数/小数</p><h2 id="代码书写规范"><a href="#代码书写规范" class="headerlink" title="代码书写规范"></a>代码书写规范</h2><p>变量定义在.c 在.h中用extern供外部引用<br>宏定义直接define在.h最前面<br>函数定义在.c 在.h中再写一遍名字即可<br>结构体和枚举需要将类型名定义在 .h ，将变量定义在.c 在 .h中用extern引用</p><h2 id="while-str-的含义"><a href="#while-str-的含义" class="headerlink" title="while(*str)的含义"></a>while(*str)的含义</h2><p>字符串是以 ‘\0’结束的 当 指针 s指向最后一个 即是 ‘\0’是 *s=’\0’ 也等于 0 即是假的 结束循环</p><h2 id="判断char数组里是否是汉字"><a href="#判断char数组里是否是汉字" class="headerlink" title="判断char数组里是否是汉字"></a>判断char数组里是否是汉字</h2><p>百度说</p><blockquote><p>负数是为汉字，二个字节一个<br>gb2312 两个字节都是负的<br>如果是gbk，第一个字节还是负的，第二字节就不一定了</p></blockquote><p> <strong>但是</strong> ！不知道为什么，在keil中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* str;</span><br><span class="line"><span class="keyword">while</span>(*str)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*str &gt;= <span class="number">0</span>&amp;&amp;str&lt;<span class="number">128</span>)&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//反正非汉字字符一定在0-127间</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>str&lt;128</code>的部分会被keil提示成 <code>always true</code>,而实际仿真中，变量窗口识别str为uchar，也就是中文的值并非<0而是>127。。。<br>改进后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(*str)</span><br><span class="line">    &#123;</span><br><span class="line">  <span class="type">uint8_t</span> ch = *str;</span><br><span class="line">        <span class="keyword">if</span>(ch &gt;= <span class="number">0</span>&amp;&amp;ch&lt;<span class="number">128</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">showchar</span>(*str, color);</span><br><span class="line">            str++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//汉字2个char 第一个char&lt;0</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> s8[<span class="number">2</span>];</span><br><span class="line">   <span class="type">int16_t</span> *s16 ;</span><br><span class="line">   s16 = (<span class="type">int16_t</span>*)str;</span><br><span class="line">   str +=<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">showChinese</span>(*s16, color);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>无符号与有符号数进行运算时，系统会自动将有符号数看成无符号数，然后进行比较。举例:<br>假定一个数是8位，一个字节表示<br>-1=11111111(补码)，相当于无符号数255<br>10=00001010，此时，-1&gt;10</p><h1 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h1><h2 id="TIM定时器"><a href="#TIM定时器" class="headerlink" title="TIM定时器"></a>TIM定时器</h2><p>计数器时钟 CK_CNT = CK_PSC/(PSC+1)<br>计数一次的时间 1/CK_CNT<br>周期 1/CK_CNT*(ARR+1)</p><h3 id="输入捕获"><a href="#输入捕获" class="headerlink" title="输入捕获"></a>输入捕获</h3><p><a href="https://blog.csdn.net/zj490044512/article/details/83754414">stm32f103输入捕获</a><br><a href="https://blog.csdn.net/as480133937/article/details/99407485">【STM32】HAL库 STM32CubeMX教程八—定时器输入捕获</a><br><a href="https://blog.csdn.net/yyx112358/article/details/78414594">使用 STM32 测量频率和占空比的几种方法</a><br><a href="https://blog.csdn.net/qq_17351161/article/details/107386857">STM32F1x HAL库学习笔记（11）定时器配置及中断（溢出中断，PWM输出，输入捕获）</a></p><h3 id="输出比较"><a href="#输出比较" class="headerlink" title="输出比较"></a>输出比较</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Blocking mode: Polling 轮询模式*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">HAL_StatusTypeDef <span class="title">HAL_TIM_OC_Start</span><span class="params">(TIM_HandleTypeDef *htim, <span class="type">uint32_t</span> Channel)</span></span>;</span><br><span class="line"><span class="function">HAL_StatusTypeDef <span class="title">HAL_TIM_OC_Stop</span><span class="params">(TIM_HandleTypeDef htim, <span class="type">uint32_t</span> Channel)</span></span>;</span><br><span class="line"><span class="comment">/* Non-Blocking mode: Interrupt 中断模式 */</span></span><br><span class="line"></span><br><span class="line"><span class="function">HAL_StatusTypeDef <span class="title">HAL_TIM_OC_Start_IT</span><span class="params">(TIM_HandleTypeDef htim, <span class="type">uint32_t</span> Channel)</span></span>;</span><br><span class="line"><span class="function">HAL_StatusTypeDef <span class="title">HAL_TIM_OC_Stop_IT</span><span class="params">(TIM_HandleTypeDef htim, <span class="type">uint32_t</span> Channel)</span></span>;</span><br><span class="line"><span class="comment">/* Non-Blocking mode: DMA DMA模式*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">HAL_StatusTypeDef <span class="title">HAL_TIM_OC_Start_DMA</span><span class="params">(TIM_HandleTypeDef *htim, <span class="type">uint32_t</span> Channel, <span class="type">uint32_t</span> *pData, <span class="type">uint16_t</span> Length)</span></span>;</span><br><span class="line"><span class="function">HAL_StatusTypeDef <span class="title">HAL_TIM_OC_Stop_DMA</span><span class="params">(TIM_HandleTypeDef *htim, <span class="type">uint32_t</span> Channel)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="全速运行卡死在-HAL-TIM-Base-Start-IT函数"><a href="#全速运行卡死在-HAL-TIM-Base-Start-IT函数" class="headerlink" title="全速运行卡死在-HAL_TIM_Base_Start_IT函数"></a>全速运行卡死在-HAL_TIM_Base_Start_IT函数</h3><blockquote><p>我没有猜错的话 你的是NVIC撞车了 都是 0 0 滴答定时器就阵亡了 修改一下分配的优先级就好了</p></blockquote><h3 id="HAL库微秒级延时"><a href="#HAL库微秒级延时" class="headerlink" title="HAL库微秒级延时"></a>HAL库微秒级延时</h3><h4 id="优选-获取系统时钟计时，非阻塞式延时"><a href="#优选-获取系统时钟计时，非阻塞式延时" class="headerlink" title="优选-获取系统时钟计时，非阻塞式延时"></a>优选-获取系统时钟计时，非阻塞式延时</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delay_ms</span><span class="params">(<span class="type">int32_t</span> nms)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int32_t</span> temp; </span><br><span class="line"> SysTick-&gt;LOAD = <span class="number">8000</span>*nms; </span><br><span class="line"> SysTick-&gt;VAL=<span class="number">0X00</span>;<span class="comment">//清空计数器 </span></span><br><span class="line"> SysTick-&gt;CTRL=<span class="number">0X01</span>;<span class="comment">//使能，减到零是无动作，采用外部时钟源 </span></span><br><span class="line"> <span class="keyword">do</span> </span><br><span class="line"> &#123; </span><br><span class="line">      temp=SysTick-&gt;CTRL;<span class="comment">//读取当前倒计数值 </span></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">while</span>((temp&amp;<span class="number">0x01</span>)&amp;&amp;(!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>))));<span class="comment">//等待时间到达 </span></span><br><span class="line">  </span><br><span class="line">    SysTick-&gt;CTRL=<span class="number">0x00</span>; <span class="comment">//关闭计数器 </span></span><br><span class="line">    SysTick-&gt;VAL =<span class="number">0X00</span>; <span class="comment">//清空计数器 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delay_us</span><span class="params">(<span class="type">int16_t</span> nus)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int32_t</span> temp; </span><br><span class="line">  SysTick-&gt;LOAD = nus*<span class="number">9</span>; <span class="comment">//72MHz</span></span><br><span class="line">  SysTick-&gt;VAL=<span class="number">0X00</span>;</span><br><span class="line">  SysTick-&gt;CTRL=<span class="number">0X01</span>;</span><br><span class="line">  <span class="keyword">do</span> </span><br><span class="line">  &#123; </span><br><span class="line">    temp=SysTick-&gt;CTRL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>((temp&amp;<span class="number">0x01</span>)&amp;&amp;(!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>))));</span><br><span class="line">   </span><br><span class="line">  SysTick-&gt;CTRL=<span class="number">0x00</span>; </span><br><span class="line">  SysTick-&gt;VAL =<span class="number">0X00</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用HAL-Delay"><a href="#利用HAL-Delay" class="headerlink" title="利用HAL_Delay"></a>利用HAL_Delay</h4><p><a href="https://blog.csdn.net/qq_34752070/article/details/82620374">STM32 HAL库学习 常使用的几种延时方式</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HAL_RCC_GetHCLKFreq()/1000 1ms中断一次，即HAL_Delay函数延时基准为1ms</span></span><br><span class="line"><span class="comment">// HAL_RCC_GetHCLKFreq()/100000  10us中断一次，即HAL_Delay函数延时基准为10us</span></span><br><span class="line"><span class="comment">// HAL_RCC_GetHCLKFreq()/1000000 1us中断一次，即HAL_Delay函数延时基准为1us</span></span><br><span class="line"><span class="built_in">HAL_SYSTICK_Config</span>(<span class="built_in">HAL_RCC_GetHCLKFreq</span>()/<span class="number">1000000</span>);  <span class="comment">// 配置并启动系统滴答定时器</span></span><br></pre></td></tr></table></figure><h4 id="利用TIM"><a href="#利用TIM" class="headerlink" title="利用TIM"></a>利用TIM</h4><p><a href="https://blog.csdn.net/qq_29506411/article/details/109070558">HAL库中同时实现微秒级us以及毫秒级ms延时</a></p><p>tim6，中断不使能</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//72M  PSC=71</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span> <span class="comment">//注意us变量的上限是65535</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// uint16_t counter= us &amp; 0xffff;</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">HAL_TIM_Base_Start</span>(&amp;htim6);</span><br><span class="line">  __HAL_TIM_SetCounter(&amp;htim6,<span class="number">0</span>);       <span class="comment">// 对上次延时产生的计数清零</span></span><br><span class="line"> </span><br><span class="line">  us = (us &gt; <span class="number">4</span>)?(us<span class="number">-2</span>):<span class="number">1</span>;    <span class="comment">// 对counter的改变是为了让短时长的延时更精确（通过示波器校正过，timer的时钟是72M）</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">while</span>( us &gt; __HAL_TIM_GetCounter(&amp;htim6) ) &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">HAL_TIM_Base_Stop</span>(&amp;htim6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h2><h3 id="串口重定向"><a href="#串口重定向" class="headerlink" title="串口重定向"></a>串口重定向</h3><p><a href="https://blog.csdn.net/morixinguan/article/details/103474643">STM32 HAL串口接收常用的几种方式</a><br><a href="https://blog.csdn.net/xinghunlove123/article/details/89503218">Stm32 HAL库 USART(发送+接收)全部采用DMA形式</a></p><h3 id="UART成帧"><a href="#UART成帧" class="headerlink" title="[UART成帧]"></a>[UART成帧]</h3><p><a href="https://blog.csdn.net/WANGYONGZIXUE/article/details/121375351">UART成帧</a></p><p>ESP8266 判断 UART 传来的数据时间间隔，若时间间隔大于 20ms， 则认为一帧结束；否则， 一直接收数据到上限值 2KB， 认为一帧结束。 ESP8266 模块判断UART 来的数据一帧结束后， 通过 WIFI 接口将数据转发出去。<br>成帧时间间隔为 20ms， 一帧上限值为 2KB。</p><h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h2><p><a href="https://blog.csdn.net/weixin_41082463/article/details/104952605">STM32（HAL）——SPI通信</a><br><a href="https://blog.csdn.net/wanruiou/article/details/97236750">HAL库的学习 —— SPI配置和使用 发送16位和8位数据</a></p><div class="table-container"><table><thead><tr><th>Mode</th><th>含义</th></tr></thead><tbody><tr><td>Full-Duplex Master</td><td>全双工主模式</td></tr><tr><td>Full-Duplex Slave</td><td>全双工从模式</td></tr><tr><td>Half-Duplex Master</td><td>半双工主模式</td></tr><tr><td>Half-Duplex Slave</td><td>半双工从模式</td></tr><tr><td>Receive Only Master</td><td>仅接收主模式</td></tr><tr><td>Receive Only Slave</td><td>仅接收从模式</td></tr><tr><td>Transmit Only Master</td><td>仅发送主模式</td></tr><tr><td>Transmit Only Slave</td><td>仅发送从模式</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Frame Format</td><td>框架格式，有Motorola和TI两种</td></tr><tr><td>Data Size</td><td>数据长度，8bit和16bit两种</td></tr><tr><td>First Bit</td><td>对齐形式，高位先行和低位先行</td></tr><tr><td>Prescaler</td><td>预分频，用于控制波特率，波特率=16MHz/Prescaler</td></tr><tr><td>Clock Polarity</td><td>CPOL，前面有讲</td></tr><tr><td>Clock Phase</td><td>CPHA，前面有讲</td></tr><tr><td>CRC Calculation</td><td>是否启用CRC</td></tr><tr><td>NSS Signal Type</td><td>片选形式，硬件实现还是软件实现</td></tr></tbody></table></div><h2 id="ADC-amp-amp-DAC"><a href="#ADC-amp-amp-DAC" class="headerlink" title="ADC &amp;&amp; DAC"></a>ADC &amp;&amp; DAC</h2><p><strong>测量前用 <code>HAL_ADCEx_Calibration_Start();</code>校准!</strong><br><a href="https://blog.csdn.net/qq_38410730/article/details/80071349">【STM32】ADC的基本原理、寄存器（超基础、详细版）</a></p><p><a href="https://blog.csdn.net/as480133937/article/details/99627062">【STM32】HAL库 STM32CubeMX教程九—ADC</a></p><p><a href="https://blog.csdn.net/qq_43743762/article/details/100067558">STM32—ADC详解</a></p><p><a href="https://blog.csdn.net/super828/article/details/79600395">STM32 HAL库学习系列第1篇 ADC配置 及 DAC配置</a></p><p><a href="https://www.cnblogs.com/xingboy/p/10018749.html">STM32使用HAL库实现ADC单通道转换(中断和非中断都有代码)</a></p><p><a href="https://wenku.baidu.com/view/7f69e2c081c758f5f61f67e2.html">用STM32内置的ADC实现数字示波器</a></p><p><a href="https://blog.csdn.net/qq_38294949/article/details/106036394">Cube生成定时器2触发双ADC同步采集并用DMA传输</a></p><p><a href="https://blog.csdn.net/weifengdq/article/details/121802176">STM32H743 ADC1+DMA1 ADC3+BDMA CubeMX配置使用</a></p><blockquote><p>要知道，转换后的数据是一个12位的二进制数，我们需要把这个二进制数代表的模拟量（电压）用数字表示出来。比如测量的电压范围是0~3.3V，转换后的二进制数是x，因为12位ADC在转换时将电压的范围大小（也就是3.3）分为4096（2^12）份，所以转换后的二进制数x代表的真实电压的计算方法就是：</p><p>y=3.3* x / 4096</p></blockquote><h2 id="血泪教训"><a href="#血泪教训" class="headerlink" title="血泪教训"></a>血泪教训</h2><p>&amp;ensp&amp;ensp如果用定时器触发adc，无论怎样设置，最高就500khz，但是一旦选择连续采样模式，让adc自动一次接一次采样，由于我配置的adc 14mhz，14个周期，因此自然而然的就是1m的采样频率。<br>而使用定时器触发时，需要关闭连续转换模式，否则无法通过定时器控制adc的采样频率<br>然后又不知道咋回事，除了使能连续转换模式，定时器触发永远是500khz的上限，我暂时没有找到不使能连续转换模式的同时使adc速度大于500khz的方法</p><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="AD9910"><a href="#AD9910" class="headerlink" title="AD9910"></a>AD9910</h2><p> <a href="https://blog.csdn.net/fraay/article/details/108687441">AD9910模块数据手册、使用方法详解</a></p><h2 id="mpu6050"><a href="#mpu6050" class="headerlink" title="mpu6050"></a>mpu6050</h2><p><a href="https://blog.csdn.net/zj490044512/article/details/83745684">stm32f103与mpu6050通信详解</a></p><h2 id="DHT11"><a href="#DHT11" class="headerlink" title="DHT11"></a>DHT11</h2><p><a href="https://blog.csdn.net/dingyc_ee/article/details/103530982">HAL库 DHT11 驱动</a></p><h2 id="SSD1306-0-96OLED"><a href="#SSD1306-0-96OLED" class="headerlink" title="SSD1306 0.96OLED"></a>SSD1306 0.96OLED</h2><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><ul><li><a href="https://github.com/SL-RU/stm32libs">stm32libs 5年前的库 基于stm32f103</a></li><li><a href="https://github.com/afiskon/stm32-ssd1306">stm32-ssd1306</a><blockquote><p>STM32 library for working with OLEDs based on SSD1306, supports I2C and 4-wire SPI. It also works with SH1106, SH1107 and SSD1309 which are compatible with SSD1306.<br>Please see ssd1306/ssd1306_conf_template.h and examples directory for more details.</p></blockquote></li><li><a href="https://github.com/4ilo/ssd1306-stm32HAL">ssd1306-stm32HAL</a><blockquote><p>ssd1306 library for stm32 using stm32-hal library’s. This library works with i2c and is configured for 128x64 oled panels by default.<br>If you search 4-wire SPI support, you can find it in the afiskon/stm32-ssd1306 fork.</p></blockquote></li></ul><h3 id="获取OLED的通信地址"><a href="#获取OLED的通信地址" class="headerlink" title="获取OLED的通信地址"></a>获取OLED的通信地址</h3><p>参考<a href="https://blog.csdn.net/qq_42860728/article/details/84310160">关于Arduino&amp;SSD1306OLED（IIC）显示的学习</a></p><blockquote><p><a href="https://shjdgwj.github.io/e6640d881469/4.png"><img src="https://shjdgwj.github.io/e6640d881469/images/loading.gif" alt=""></a><br>模块背面的IIC ADRESSSELECT表示该模块在IIC通信作为从机时的地址，当中间的脚用电阻和左边接起来时，地址为0x78，当和右边接起来时，地址为0x7A。</p><p>图片所示的通信地址是0x78</p></blockquote><h3 id="显示与取模"><a href="#显示与取模" class="headerlink" title="显示与取模"></a>显示与取模</h3><p><a href="https://blog.csdn.net/u010858987/article/details/103362144">关于0.96OLED的显示过程详解（I2C通信方式）</a></p><h2 id="ESP8266"><a href="#ESP8266" class="headerlink" title="ESP8266"></a>ESP8266</h2><p><a href="https://blog.csdn.net/zDavid_2018/article/details/108349593">【stm32】wifi ESP8266的AT指令</a></p><ul><li><code>__HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_RXNE);</code>中断模式下使用此函数使能中断</li></ul><p><a href="https://dsx2016.com/?p=1510">arduino+ESP8266模块使用AT指令设置wifi</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 0 */</span></span><br><span class="line">  <span class="type">uint8_t</span> ch = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (__HAL_UART_GET_FLAG(&amp;huart1, UART_FLAG_RXNE) != RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//读寄存器</span></span><br><span class="line">    ch = (<span class="type">uint16_t</span>)<span class="built_in">READ_REG</span>(huart1.Instance-&gt;DR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将串口1的数据 写入串口3（串口3将数据 -&gt; esp8266）</span></span><br><span class="line">    <span class="built_in">WRITE_REG</span>(huart3.Instance-&gt;DR, ch);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END USART1_IRQn 0 */</span></span><br><span class="line">  <span class="built_in">HAL_UART_IRQHandler</span>(&amp;huart1);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">USART3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART3_IRQn 0 */</span></span><br><span class="line">  <span class="type">uint8_t</span> ch = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (__HAL_UART_GET_FLAG(&amp;huart3, UART_FLAG_RXNE) != RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    ch = (<span class="type">uint16_t</span>)<span class="built_in">READ_REG</span>(huart3.Instance-&gt;DR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给串口1</span></span><br><span class="line">    <span class="built_in">WRITE_REG</span>(huart1.Instance-&gt;DR, ch);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART3_IRQn 0 */</span></span><br><span class="line">  <span class="built_in">HAL_UART_IRQHandler</span>(&amp;huart3);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART3_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART3_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h2><ol><li><a href="https://blog.csdn.net/u013028442/article/details/88836515">matlab中fft运算后需要对幅值乘2除N</a></li><li>矩形窗(Rectangular)：加矩形窗等于不加窗，因为在截取时域信号时本身就是采用矩形截取，所以矩形窗适用于瞬态变化的信号，只要采集的时间足够长，信号宽度基本可以覆盖整个有效的瞬态部分。<br>汉宁窗(Von Hann)：如果测试信号有多个频率分量，频谱表现的十分复杂，且测试的目的更多关注频率点而非能量的大小。在这种情况下，需要选择一个主瓣够窄的窗函数，汉宁窗是一个很好的选择。<br>flattop窗：如果测试的目的更多的关注某周期信号频率点的能量值，比如，更关心其EUpeak,EUpeak-peak,EUrms，那么其幅度的准确性则更加的重要，可以选择一个主瓣稍宽的窗，flattop窗在这样的情况下经常被使用。</li><li><a href="https://blog.csdn.net/u013346007/article/details/54142981">【Get深一度】矩形窗/bartlett/Blackman/hamming/Hanning/kaiser -相控阵雷达原理</a></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="STM32CUBEMX-BUG"><a href="#STM32CUBEMX-BUG" class="headerlink" title="STM32CUBEMX BUG"></a>STM32CUBEMX BUG</h2><ol><li>版本6.5.0 stm32h743 配置ADC时无法配置其时钟。<br>版本6.3.0解决此问题</li><li>STM32 DMA初始化代码要在ADC前面。</li><li><a href="https://blog.csdn.net/weixin_49497012/article/details/118499056">STM32CubeMX生成代码时防止UTF-8乱码</a><br><strong>添加环境变量</strong><ul><li>变量名称：JAVA_TOOL_OPTIONS</li><li>变量值：-Dfile.encoding=UTF-8</li></ul></li></ol><h2 id="DMA循环模式导致hal-delay失效"><a href="#DMA循环模式导致hal-delay失效" class="headerlink" title="DMA循环模式导致hal_delay失效"></a>DMA循环模式导致hal_delay失效</h2><p><a href="https://blog.csdn.net/apple_2333/article/details/96962574">可能的原因</a><br>心态爆炸！<br>野火教程</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uint32_t adcData<span class="selector-attr">[5]</span>;</span><br><span class="line"><span class="built_in">HAL_ADCEx_MultiModeStart_DMA</span>(&amp;hadc1, (uint32_t *)&amp;adcData, <span class="built_in">sizeof</span>(adcData));</span><br></pre></td></tr></table></figure><p>而实际上应该写</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uint32_t adcData<span class="selector-attr">[5]</span>;</span><br><span class="line"><span class="built_in">HAL_ADCEx_MultiModeStart_DMA</span>(&amp;hadc1, (uint32_t *)&amp;adcData, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//HAL_ADC_Start_DMA(&amp;hadc1, (uint32_t *)&amp;adcData, 5)</span></span><br></pre></td></tr></table></figure><p><code>HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)</code><br><code>HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)</code><br>Length的参数不应该是数据长度，应该是数据数量。<br><a href="https://shjdgwj.github.io/e6640d881469/5.png"><img src="https://shjdgwj.github.io/e6640d881469/images/loading.gif" alt=""></a><br>在此问题耗时6小时，特此纪念</p><p>注/HAL_ADC_Start_DMA()的data变量为uint32_t的原因是hal为了程序方便移植，虽然f1只支持12位精度的adc，但是其他芯片支持更高精度的adc。</p><h2 id="hal-根据exti获取触发中断的管脚"><a href="#hal-根据exti获取触发中断的管脚" class="headerlink" title="hal 根据exti获取触发中断的管脚"></a>hal 根据exti获取触发中断的管脚</h2><p>比如stm32f103c8t6 PA15和PC15都是EXTI15 那触发时我怎么知道是哪个脚触发？</p><blockquote><p><a href="https://zhidao.baidu.com/question/1642129457849988940.html">https://zhidao.baidu.com/question/1642129457849988940.html</a><br>比如，来自PA0的外部中断，可以通过库函数<br>(EXTI_GetITStatus(EXTI_Line0)!=RESET);<br>判断外部中断来源是不是来源于端口0（至于是PA0还是PB0可通过查询中断来源进行判断，但不建议这么用，所以设置外部中断的端口建议不要重复，比如使用了PA0，就不要使用PB0之类的）<br>另外要注意：端口0-4有自己独立的外部中断函数入口，5-9和10-15两组分别共用两个外部中断函数入口</p></blockquote><h2 id="HAL-GPIO-EXTI-Callback"><a href="#HAL-GPIO-EXTI-Callback" class="headerlink" title="HAL_GPIO_EXTI_Callback"></a>HAL_GPIO_EXTI_Callback</h2><p>HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 里面一调用函数就锁死，直接写语句没问题</p><blockquote><p><a href="https://www.stm32cube.com/question/615">https://www.stm32cube.com/question/615</a><br>HAL_InitTick(uint32_t TickPriority)这个函数要重新定义下，把systick的主优先级定义为0x0000(最高），之前HAL库给出的宏参数TICK_INT_PRIORITY 0X000f(最低）。导致一进中断<br>HAL的时钟就停摆了。</p></blockquote><h2 id="“Insufficient-RAM-for-Flash-Algorithms”出错原因及解决方案"><a href="#“Insufficient-RAM-for-Flash-Algorithms”出错原因及解决方案" class="headerlink" title="“Insufficient RAM for Flash Algorithms”出错原因及解决方案"></a>“Insufficient RAM for Flash Algorithms”出错原因及解决方案</h2><p>Insufficient RAM for Flash Algorithms”错误一般会有一个“cannot load flash programming algorithm !”的提示窗口<br><a href="https://shjdgwj.github.io/e6640d881469/6.png"><img src="https://shjdgwj.github.io/e6640d881469/images/loading.gif" alt=""></a><br>如图更改为 <code>0x0000FFF4</code><br><a href="https://shjdgwj.github.io/e6640d881469/7.png"><img src="https://shjdgwj.github.io/e6640d881469/images/loading.gif" alt=""></a></p><p>注：C++ include 添加 <code>Drivers\CMSIS\DSP\Include</code></p><h2 id="stm32函数中大数组问题"><a href="#stm32函数中大数组问题" class="headerlink" title="stm32函数中大数组问题"></a>stm32函数中大数组问题</h2><blockquote><p>在以stm32构建系统的时候，当用户自己编写函数时，发现函数出现意想不到的结果，其中一项你需要注意的是看你的函数中有没有大的数组，或者说查看你函数中临时变量的总量是不是超过了系统设置的堆栈的最大值这类问题编译器是不会给出错误的，相应的当出现程序不能给出想要的结果的时候，我们需要特别注意这类问题。对系统设置函栈最大值的宏一般放在系统的启动文件中，具体的是startup_stm32xxxx.s这个启动文件的Stack_Size这个宏</p></blockquote><h2 id="STM32H743-STM32CUBEMX6-3-0-ADC时钟为什么能配置为80MHz？"><a href="#STM32H743-STM32CUBEMX6-3-0-ADC时钟为什么能配置为80MHz？" class="headerlink" title="STM32H743 STM32CUBEMX6.3.0 ADC时钟为什么能配置为80MHz？"></a>STM32H743 STM32CUBEMX6.3.0 ADC时钟为什么能配置为80MHz？</h2><p><a href="https://community.st.com/s/question/0D53W000013pKvlSAE/clock-source-for-adc-of-the-stm32h7-cpu">Clock source for ADC of The STM32H7 CPU</a></p><p>ADC 时钟配置成160MHz，12位可以达到12M采样率（ADC直连通道） 14位5M采样率</p><p><a href="https://shjdgwj.github.io/e6640d881469/image-20220721150437943.png"><img src="https://shjdgwj.github.io/e6640d881469/images/loading.gif" alt="" title="image-20220721150437943"></a>## STM32F429 HAL 定时器触发DMA 内存到内存</p><p><a href="https://blog.csdn.net/qq_38974298/article/details/118158575">https://blog.csdn.net/qq_38974298/article/details/118158575</a></p><p><a href="http://www.efton.sk/STM32/bt.c">http://www.efton.sk/STM32/bt.c</a></p><h2 id="Keil-MDK下如何设置非零初始化变量-基于Arm-Compiler-6"><a href="#Keil-MDK下如何设置非零初始化变量-基于Arm-Compiler-6" class="headerlink" title="Keil MDK下如何设置非零初始化变量 - 基于Arm Compiler 6"></a><a href="https://blog.csdn.net/zhzht19861011/article/details/124904070">Keil MDK下如何设置非零初始化变量 - 基于Arm Compiler 6</a></h2><div class="table-container"><table><thead><tr><th>Arm Compiler 5 属性</th><th>Arm Compiler 6 属性</th><th>描述</th></tr></thead><tbody><tr><td><code>__attribute__((at(address)))</code></td><td><code>__attribute__((section(&quot;.ARM.__at_address&quot;)))</code></td><td>Arm Compiler 6 中的 armlink 仍然支持以 <code>.ARM.__at_address</code> 的形式放置段</td></tr><tr><td><code>__attribute__((at(address), zero_init))</code></td><td><code>__attribute__((section(&quot;.bss.ARM.__at_address&quot;)))</code></td><td>Arm Compiler 6 中的 armlink 支持以 <code>.bss.ARM.__at_address</code> 的形式放置零初始化段。 <code>.bss</code> 前缀区分大小写，并且必须全部小写。</td></tr><tr><td><code>__attribute__((section(name), zero_init))</code></td><td><code>__attribute__((section(&quot;.bss.name&quot;)))</code></td><td><code>name</code> 是你选择的名字。 <code>.bss</code> 前缀区分大小写，并且必须全部小写。</td></tr><tr><td><code>__attribute__((zero_init))</code></td><td>不支持 默认将零初始化变量放在 <code>.bss</code> 段。</td><td>如果变量具有初始值设定项，则 Arm Compiler 5 会生成错误。 否则，它将零初始化变量放在 <code>.bss</code>段。</td></tr></tbody></table></div><blockquote><h3 id="5-Arm®-Compiler-5-如何防止未初始化变量被初始化为0"><a href="#5-Arm®-Compiler-5-如何防止未初始化变量被初始化为0" class="headerlink" title="5. Arm® Compiler 5 如何防止未初始化变量被初始化为0"></a>5. Arm® Compiler 5 如何防止未初始化变量被初始化为0</h3><ol><li><p>定义变量时，使用编译器扩展属性 <code>__attribute__((section(&quot;name&quot;), zero_init))</code>来将变量放入指定段中。其中 <code>section(&quot;name&quot;)</code>选择一个指定的段，<code>zero_init</code>告诉编译器将变量放入ZI段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> phy_link_init_flag __attribute__((section(<span class="string">&quot;NO_INIT&quot;</span>), zero_init));</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>在分散加载文件中，定义名为 <code>NO_INIT</code>的段。注意该段所在的可执行域要具有 <code>UNINIT</code>属性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LR_IROM1 <span class="number">0x00000000</span> <span class="number">0x00080000</span>  &#123;    ; load region size_region 从<span class="number">0</span>扇区开始</span><br><span class="line">  ER_IROM1 <span class="number">0x00000000</span> <span class="number">0x00080000</span>  &#123;  ; load address = execution address </span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 <span class="number">0x10000000</span> <span class="number">0x0000F000</span>  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  RW_IRAM2 <span class="number">0x1000F000</span> UNINIT <span class="number">0x00001000</span>  &#123;</span><br><span class="line">   .ANY (NO_INIT)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-Arm®-Compiler-6-如何防止未初始化变量被初始化为0"><a href="#6-Arm®-Compiler-6-如何防止未初始化变量被初始化为0" class="headerlink" title="6. Arm® Compiler 6 如何防止未初始化变量被初始化为0"></a>6. Arm® Compiler 6 如何防止未初始化变量被初始化为0</h3><ol><li><p>定义变量时，使用编译器扩展属性 <code>__attribute__((section(&quot;name&quot;)))</code>来将变量放入指定段中。其中 <code>section(&quot;name&quot;)</code>选择一个指定的段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> phy_link_init_flag __attribute__((section(<span class="string">&quot;.bss.NO_INIT&quot;</span>)));</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>在分散加载文件中，定义名为 <code>.bss.NO_INIT</code>的段，其中前缀 <code>.bss</code>是必须的，并且只能为小写。这个前缀表明该数据段具有ZI属性。注意该段所在的可执行域要具有 <code>UNINIT</code>属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LR_IROM1 <span class="number">0x00000000</span> <span class="number">0x00080000</span>  &#123;    ; load region size_region 从<span class="number">0</span>扇区开始</span><br><span class="line">  ER_IROM1 <span class="number">0x00000000</span> <span class="number">0x00080000</span>  &#123;  ; load address = execution address </span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 <span class="number">0x10000000</span> <span class="number">0x0000F000</span>  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  RW_IRAM2 <span class="number">0x1000F000</span> UNINIT <span class="number">0x00001000</span>  &#123;</span><br><span class="line">   .ANY (.bss.NO_INIT)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="定时器触发DMA控制GPIO"><a href="#定时器触发DMA控制GPIO" class="headerlink" title="定时器触发DMA控制GPIO"></a>定时器触发DMA控制GPIO</h2><p><a href="https://community.st.com/s/question/0D53W00000Eo9rLSAR/parallel-transmission-using-gpio-and-dma-like-an4666">Parallel transmission using GPIO and DMA (like AN4666)</a></p><p><a href="https://metebalci.com/blog/stm32h7-gpio-toggling/">stm32h7-gpio-toggling</a></p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://shjdgwj.github.io/e6640d881469/">STM32学习笔记</a><br><a href="https://blog.csdn.net/qq_38410730/category_7511110.html">Yngz_Miao《嵌入式》STM32开发笔记</a><br><a href="https://blog.csdn.net/as480133937/category_9188655.html">Z小旋 STM32</a><br><a href="http://www.mculover666.cn/">mculover666</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      <category domain="http://example.com/tags/STM32/">STM32</category>
      
      
      <comments>http://example.com/2022/12/10/STM32/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rock5B</title>
      <link>http://example.com/2022/12/10/Rock5B/</link>
      <guid>http://example.com/2022/12/10/Rock5B/</guid>
      <pubDate>Sat, 10 Dec 2022 12:59:07 GMT</pubDate>
      
      <description>&lt;p&gt;以Rock5B为例的rk3588开发文档，不断更新ing&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>以Rock5B为例的rk3588开发文档，不断更新ing</p><span id="more"></span><h1 id="性能参考"><a href="#性能参考" class="headerlink" title="性能参考"></a>性能参考</h1><p><a href="https://browser.geekbench.com/v5/cpu/18817954">https://browser.geekbench.com/v5/cpu/18817954</a><br><a href="https://shjdgwj.github.io/14733f4e12d9/image-20221123144235521.png"><img src="https://shjdgwj.github.io/14733f4e12d9/image-20221123144235521.png" alt="img" title="image-20221123144235521"></a></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="抽奖"><a href="#抽奖" class="headerlink" title="抽奖"></a>抽奖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 0 7`; do echo ========cpu$i;cat /sys/bus/cpu/devices/cpu$&#123;i&#125;/cpufreq/scaling_max_freq; done</span><br><span class="line">sudo sed -i &quot;s|focal|jammy|g&quot; /etc/apt/sources.list &amp;&amp; sudo apt update &amp;&amp; sudo apt dist-upgrade &amp;&amp; sudo reboot</span><br><span class="line">cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq</span><br><span class="line">lscpu | grep MHz #pytm-volt-sel 越大越好</span><br><span class="line">dmesg | grep -i pvtm</span><br><span class="line">dmesg | grep -E &#x27;pvtm|dmc&#x27; | grep sel</span><br></pre></td></tr></table></figure><p>   <a href="https://shjdgwj.github.io/14733f4e12d9/image-20221026213053527.png"><img src="https://shjdgwj.github.io/14733f4e12d9/image-20221026213053527.png" alt="img" title="image-20221026213053527"></a></p><h2 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install locales</span><br><span class="line">sudo apt install  fonts-noto-cjk fonts-noto-cjk-extra</span><br><span class="line">sudo dpkg-reconfigure locales </span><br></pre></td></tr></table></figure><p>   选 en_US UTF-8 和 zh_CN UTF, 设置默认locales 为 en_us</p><h2 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱"></a>工具箱</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -O rockpi5.sh https://uwp.cc/s/board/rockpi5.sh </span><br><span class="line">sudo chmod +x rockpi5.sh</span><br><span class="line">sudo ./rockpi5.sh</span><br></pre></td></tr></table></figure><h2 id="PD协商电压-温度"><a href="#PD协商电压-温度" class="headerlink" title="PD协商电压 温度"></a>PD协商电压 温度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lm-sensors</span><br><span class="line">sensors</span><br></pre></td></tr></table></figure><h2 id="编译和网络校时"><a href="#编译和网络校时" class="headerlink" title="编译和网络校时"></a>编译和网络校时</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential #编译</span><br><span class="line">sudo apt install ntp#网络校时</span><br></pre></td></tr></table></figure><h2 id="Armbian上使用3D加速驱动"><a href="#Armbian上使用3D加速驱动" class="headerlink" title="Armbian上使用3D加速驱动"></a>Armbian上使用3D加速驱动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:liujianfeng1994/panfork-mesa</span><br><span class="line">sudo add-apt-repository ppa:liujianfeng1994/rockchip-multimedia</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt dist-upgrade</span><br></pre></td></tr></table></figure><p>操作文档:<a href="https://launchpad.net/~liujianfeng1994/+archive/ubuntu/rockchip-multimedia">PPA description</a></p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="查看温度"><a href="#查看温度" class="headerlink" title="查看温度"></a>查看温度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">echo $[$(cat /sys/class/thermal/thermal_zone0/temp)/1000]°</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Rock-5B-本地编译要点说明"><a href="#Rock-5B-本地编译要点说明" class="headerlink" title="Rock 5B 本地编译要点说明"></a>Rock 5B 本地编译要点说明</h2><p>   最重要的差别是 ： （阿超哥的方法 ）检测编译环境，如果是在 arm64上编译的话，就去掉ARCH 和 CROSS_COMPILE 交叉编译变量 build/board_configs.sh 最后面加上这几行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">build on native arm64</span></span><br><span class="line">if [ &quot;X$(uname -m)&quot; == &quot;Xaarch64&quot; -a &quot;X$&#123;ARCH&#125;&quot; == &quot;Xarm64&quot; ]; then</span><br><span class="line">    unset ARCH</span><br><span class="line">    unset CROSS_COMPILE</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>主要参考是官方wiki：<a href="https://wiki.radxa.com/Rock5/guide/build-debian-from-debos-radxa">https://wiki.radxa.com/Rock5/guide/build-debian-from-debos-radxa</a> （这里原文是跨平台交叉编译）</li><li>在工具链这里，不需要 安装跨平台工具链 gcc-arm-10.3<strong>*</strong> ，只要本地安装 gcc 及配套工具（ sudo apt-get install gcc xxx)</li><li>其他按官方顺序执行命令<br>注意：u-boot 和kernel有配置好的config，只要按官方分别执行对应的 ./build/mk-uboot.sh rk3588-rock-5b 或 ./build/mk-kernel.sh rk3588-rock-5b</li></ul><h2 id="exFAT"><a href="#exFAT" class="headerlink" title="exFAT"></a>exFAT</h2><p>   安装exfat fuse</p><h2 id="kubesphere-3-3-1"><a href="#kubesphere-3-3-1" class="headerlink" title="kubesphere 3.3.1"></a>kubesphere 3.3.1</h2><p>   步骤1：更换内核<br>   因为 Radxa 官方内核现在不支持，暂时需要更换内核：<br>   <a href="https://github.com/ihexon/rock5b_kernel/releases">https://github.com/ihexon/rock5b_kernel/releases</a><br>   步骤2：根据 KubeSphere 官方文档安装<br>   <a href="https://kubesphere.com.cn/docs/v3.3/quick-start/all-in-one-on-linux/">https://kubesphere.com.cn/docs/v3.3/quick-start/all-in-one-on-linux/</a><br>   步骤3：修补 KubeSphere 开源版暂不支持的 arm64 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">defaultbackend</span></span><br><span class="line">sudo docker pull playgali/defaultbackend</span><br><span class="line">sudo docker tag playgali/defaultbackend mirrorgooglecontainers/defaultbackend-amd64:1.4</span><br></pre></td></tr></table></figure><h2 id="硬件驱动"><a href="#硬件驱动" class="headerlink" title="硬件驱动"></a>硬件驱动</h2><p>   <a href="https://github.com/happyme531/Adafruit_Blinka/commits/rk3588-rock-5">https://github.com/happyme531/Adafruit_Blinka/commits/rk3588-rock-5</a><br>   rock5 gpio i2c spi pwm 串口 adc 全部适配完成</p><h2 id="wifi"><a href="#wifi" class="headerlink" title="wifi"></a>wifi</h2><pre><code>使用`nmtui`命令注意Security选择 WPA &amp; WPA2 Personal</code></pre><h2 id="KDE桌面"><a href="#KDE桌面" class="headerlink" title="KDE桌面"></a>KDE桌面</h2><p>   <a href="https://forum.armbian.com/topic/10526-using-different-desktop-environments-on-armbian/">Using different desktop environments on Armbian</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装KDE桌面</span></span><br><span class="line">sudo add-apt-repository ppa:kubuntu-ppa/backports</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y kubuntu-desktop</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改默认桌面</span></span><br><span class="line">cd /usr/share/xsessions</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">看到有ubuntu.desktop  ubuntu-xorg.desktop</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后面还不会改</span></span><br></pre></td></tr></table></figure><h2 id="安卓root"><a href="#安卓root" class="headerlink" title="安卓root"></a>安卓root</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份boot</span> </span><br><span class="line">dd if=/dev/block/nvme0n1p5 of=/storage/emulated/0/mod.img</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刷入boot</span> </span><br><span class="line">dd if=/storage/emulated/0/mod.img of=dev/block/nvme0n1p5</span><br><span class="line"> sync</span><br><span class="line"> reboot</span><br></pre></td></tr></table></figure><h2 id="EMMC镜像备份导出方法"><a href="#EMMC镜像备份导出方法" class="headerlink" title="EMMC镜像备份导出方法"></a>EMMC镜像备份导出方法</h2><p>用户基于我们发布是镜像系统，安装软件或进行其他配置之后，如果想备份系统，有很多方法可以实现，我这里提供一个比较简单的思路供大家参考。</p><p>前置条件：</p><p>假如您手边有一张已经做好系统的TF卡<br>各种改动后的EMMC系统<br>核心操作步骤：</p><p>从EMMC启动系统，登陆桌面并打开终端命令行更改卷标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo su</span><br><span class="line">fatlabel /dev/mmcblk0p1 emmc-boot</span><br><span class="line">e2label /dev/mmcblk0p2 emmc-rootfs</span><br><span class="line"></span><br><span class="line">vim /boot/firmware/cmdline.txt</span><br><span class="line">将writable替换为emmc-rootfs  然后保存退出</span><br><span class="line"></span><br><span class="line">vim /etc/fstab</span><br><span class="line">将writable替换为emmc-rootfs  然后保存退出</span><br><span class="line"></span><br><span class="line">sync;</span><br></pre></td></tr></table></figure><p>插入TF卡，重启系统</p><p>默认优先从TF卡引导系统，进入系统之后，可以挂载EMMC分区进行备份压缩</p><h2 id="Docker-运行openwrt"><a href="#Docker-运行openwrt" class="headerlink" title="Docker 运行openwrt"></a>Docker 运行openwrt</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">开启网卡混杂模式</span><br><span class="line">sudo ip link set eth0 promisc on</span><br><span class="line"></span><br><span class="line">创建docker网卡</span><br><span class="line">docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=eth0 macnet</span><br><span class="line"></span><br><span class="line">查看docker网卡</span><br><span class="line">docker network list</span><br><span class="line"></span><br><span class="line">项目地址https://github.com/SuLingGG/OpenWrt-Docker</span><br><span class="line">查看自己的系统的架构</span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">创建并启动docker镜像</span><br><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged sulinggg/openwrt:armv8 /sbin/init</span><br><span class="line"></span><br><span class="line">docker给普通用户权限</span><br><span class="line">先查看一下默认这个文件/var/run/docker.sock的权限是啥</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">ls</span> -al /var/run/docker.sock</span></span><br><span class="line">srw-rw---- 1 root root 0 Feb 15 03:13 /var/run/docker.sock</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改文件权限</span></span><br><span class="line">sudo chmod 666 /var/run/docker.sock</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改后，再查看一下这个文件的权限</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">ls</span> -al /var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line">srw-rw-rw- 1 root root 0 Feb 15 03:14 /var/run/docker.sock</span><br><span class="line"></span><br><span class="line">进入bash终端修改ip</span><br><span class="line">vim /etc/config/network</span><br><span class="line">将后面三项改成自己的ip</span><br><span class="line"></span><br><span class="line">重启openwrt网络</span><br><span class="line">/etc/init.d/network restart</span><br><span class="line"></span><br><span class="line">直接浏览器访问刚刚设置的ip</span><br><span class="line">密码默认passwd</span><br><span class="line"></span><br><span class="line">在网络LAN口中关闭桥接接口</span><br><span class="line"></span><br><span class="line">网络防火墙自定义规则中添加</span><br><span class="line">iptables -t nat -I POSTROUTING -j MASQUERADE</span><br><span class="line"></span><br><span class="line">在网络Turbo ACC网络加速中勾选DNS缓存</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><ol><li><a href="http://www.zphj1987.com/rock5b-ke-yi-yun-xing-deuos-ca.html">rock5b uos</a></li><li>rock5b专用内核：完美收官，对应源码已上传：<br><a href="https://github.com/unifreq/linux-rock5b">https://github.com/unifreq/linux-rock5b</a><br>允许全频率（电压超至1.1v, 默认未开）<br>开启方法：<br>nano /boot/armbianEnv.txt<br>把overlays=uart7-m2改为overlays=uart7-m2 [空格] full-cpufreq</li><li>Rock5b Openwrt固件：采用5.10.149内核，并支持nvme（已测试）或usb启动（未测试）。<br>如果需要nvme或usb启动，必须要先刷入spi 的bootloader, 用前两天发的 bootloader包：<br>rock5b-bootloader_20221017.tar.gz<br><a href="https://t.me/openwrt_flippy/3464">https://t.me/openwrt_flippy/3464</a><br>用法：<ol><li>先刷入TF卡启动成功后，把img镜像上传到 /mnt/mmcblk0p4</li><li>进入TF卡里的openwrt,运行命令：<br>cd /mnt/mmcblk0p4<br>dd if=openwrt-xxxxxx.img of=/dev/nvme0n1 bs=1M conv=fsync</li><li>然后关机，把TF卡拔掉再开机即可。</li><li>用同一个镜像写的TF卡固件和nvme固件由于UUID相同，如果再重新插上TF卡启动会有问题，TF和nvme采用不同版本的固件就没问题。</li></ol></li><li>官方镜像用户名密码 rock @rock</li><li><blockquote><p>目前我看到的并且我自己试过的各种镜像，我总结一下，咱们群里用的各种rock5b镜像主要是有四个来源：</p><p>1、radxa官方发出的debian、ubuntu和安卓，已经有半个月没更新了，debian和ubuntu可以直接装obs，但没有mali驱动之类的，不能用gpu</p><p>2、armbian官方社区发出的armbian，尤其是sid的那个，但armbian官方社区也已经有半个多月没更新了，我试过记得也可以直接装obs，但也没有mali驱动之类的，不能用gpu</p><p>3、咱们群里有lost in utopia这位大佬，整合出来mali驱动，可以用gpu，并且这位大佬在3天前又发出自带mali驱动可以开箱即用的armbian镜像，桌面是gnome，doom3可以全特效平均跑40帧，但不能直接装obs</p><p><a href="https://github.com/amazingfate/armbian-rock5b-images/releases">https://github.com/amazingfate/armbian-rock5b-images/releases</a></p><p>4、咱们群里还有StatusHeadcrabed这位大佬， 也发出自带mali驱动可以开箱即用的armbian镜像，桌面是gnome和kde，doom3可以全特效平均跑40帧，但不能直接装obs</p></blockquote></li></ol><h1 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h1><ol><li>RTL8852be<br>下载<a href="https://github.com/armbian/firmware/blob/master/rtl8852bu_fw">rtl8852bu_fw.bin</a>放进/lib/firmware/realtek</li><li><p>显卡GPU</p><ul><li><a href="https://icecream95.gitlab.io/fun-with-csf-firmware.html">Fun with CSF firmware</a></li><li><p><a href="https://gitlab.com/panfork/mesa/">mesa</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:liujianfeng1994/panfork-mesa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libgl1-mesa-dri</span><br><span class="line">sudo apt-cache policy  libgl1-mesa-dri</span><br><span class="line">sudo apt install mesa*</span><br></pre></td></tr></table></figure></li><li><a href="https://gitlab.com/panfork/panfwost">panfwost</a></li></ul></li></ol><h2 id="参考资料链接"><a href="#参考资料链接" class="headerlink" title="参考资料链接"></a>参考资料链接</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/LINUX/">LINUX</category>
      
      
      <category domain="http://example.com/tags/ROCK5B/">ROCK5B</category>
      
      
      <comments>http://example.com/2022/12/10/Rock5B/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
